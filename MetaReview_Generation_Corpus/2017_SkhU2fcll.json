{"year": "2017", "forum": "SkhU2fcll", "title": "Deep Multi-task Representation Learning: A Tensor Factorisation Approach", "decision": "Accept (Poster)", "meta_review": "The reviews for this paper were quite mixed, with one strong accept and a marginal reject. A fourth reviewer with strong expertise in multi-task learning and deep learning was brought in to read the latest manuscript. Due to time constraints, this fourth review was not entered in the system but communicated through personal communication. \n \n Pros:\n - Reviewers in general found the paper clear and well written.\n - Multi-task learning in deep models is of interest to the community\n - The approach is sensible and the experiments show that it seems to work\n \n Cons:\n - Factorization methods have been used extensively in deep learning, so the reviewers may have found the approach incremental\n - One reviewer was not convinced that the proposed method would work better than existing multi-task learning methods\n - Not all reviewers were convinced by the experiments\n - The fourth reviewer found the approach very sensible but was not excited enough to champion the paper\n \n The paper was highly regarded by at least one reviewer and two thought it should be accepted. The PCs also agree that this paper deserves to appear at the conference.", "reviews": [{"review_id": "SkhU2fcll-0", "review_text": "The paper proposed a nice framework leveraging Tucker and Tensor train low-rank tensor factorization to induce parameter sharing for multi-task learning. The framework is nice and appealing. However, MTL is a very well studied problem and the paper considers simple task for different classification, and it is not clear if we really need \"Deep Learning\" for these simple datasets. A comparison with existing shallow MTL is necessary to show the benefits of the proposed methods (and in particular being deep) on the dataset. The authors ignore them on the basis of speculation and it is not clear if the proposed framework is really superior to simple regularizations like the nuclear norm. The idea of nuclear norm regularization can also be extended to deep learning as gradient descent are popular in all methods. ", "rating": "5: Marginally below acceptance threshold", "reply_text": "-- - Comparison with classic ( shallow ) MTL methods As the reviewer asked , we provide a comparison with classic MTL methods for the first experiment ( MNIST , binary one-vs-rest classification , 1 % training data , mean of error rates for 10-fold ) . PCA feature is obtained by flattening the image then dimension reduction by PCA . CNN feature is obtained by the penultimate layer of the CNN network used in our experiment ( a variant of LeNet ) . + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | | PCA Feature | CNN Feature | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | Single Task Learning | 16.89 | 11.52 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | Evgeniou & Pontil , 2004 | 15.27 | 10.32 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | Argyriou et al. , 2008 | 15.64 | 9.56 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | Kumar & Daume III , 2012 | 14.08 | 9.41 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | DMTRL-LAF | N.A . | 8.25 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | DMTRL-Tucker | N.A . | 9.24 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | DMTRL-TT | N.A . | 7.31 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | UD-MTL | N.A . | 9.34 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ We have previously tried classic MTL methods in our experiments , and DMTRL decisively outperforms them throughout . Despite these positive results , this comparison was deliberately excluded in the paper , and we briefly explained why in Section 4.1 . Here we detail the reasons : 1 ) As seen above , PCA feature is not competitive with deep learning . This also answers the reviewer 's question about if deep learning is necessary here . 2 ) From an experimental design view , it is not a very scientific comparison to make . If our DMTRL outperforms classic MTL methods with PCA feature : it is not clear if the difference is due to better MTL strategy ( ours v.s.others ) or more discriminative feature ( CNN v.s.PCA ) .Alternatively , we can replace the PCA feature by CNN feature ( second column of above table ) . Then classic MTL methods have two steps : feature extraction via CNN and classifier training by the MTL method . Again we can not conclude that our method is better because the difference could be due to either the MTL method itself , or the optimisation procedure : ours is end-to-end training , and classic MTL + CNN feature approaches have two independent steps . Therefore , when we designed the experiments , we made sure that all competitors are ( i ) trained in an end-to-end fashion ( ii ) all based on the same CNN architecture . Then we can confidently say that any performance difference is due to different MTL methods , rather than other factors . 3 ) Classic MTL methods can be a valid baseline for the first experiment only because they are binary classification problems . In the first experiment we cast a multi-class classification problem into multiple binary classification problems , so each class is a task . Though this is a well established setting in MTL benchmarking , for many practical problems , esp . those needing deep models , each task itself is a multi-class classification problem . We denote this setting as heterogeneous MTL ( i.e. , our second and third experiment ) . This setting is usually addressed by some user-defined neural network architecture , and a typical design of which is to keep the bottom layers ' parameters tied , and each task has its own top layer ( s ) parameters . One of the key motivations of this work is to eliminate the need for manually designing such a topology ; instead finding it in a data-driven way . Classic MTL methods , in general , can not apply to this setting of multiple tasks where each task has multiple classes . Despite these caveats , we can easily add comparisons to the classic MTL methods in the final version . -- - Positioning of this submission We agree if a problem is well solved by shallow methods , it is not necessary to get deep learning involved . The reviewer may be aware that some very classic MTL problems ( datasets ) are not evaluated in this submission , for example , School Dataset , Computer Survey Dataset . The reason is exactly what the reviewer mentioned : you do not need deep learning for these datasets . The experiments in this submission are object recognition problems from computer vision community , and for those problems , deep learning ( CNN ) has a clear advantage . Then it is desirable to find a systematic way to add MTL upon deep learning . In summary , the need of deep learning comes first . -- - Extending nuclear norm to deep learning We appreciate the reviewer mentioned this point , and coincidentally it is our on-going project . Even though it is totally out of scope of reviewing this submission , we can share some thoughts on this direction . The nuclear ( trace ) norm is defined for matrix , and has a close connection to matrix rank . Thus , some work based on the assumption of low-rank matrix , e.g. , multi-task learning and matrix completion , use it as a regularisation term . The parameters in deep learning or deep MTL are usually in a form of higher-order ( > =3 ) tensors . But it is not straightforward to extend nuclear norm from matrices to tensors , because tensor rank is non-uniquely defined . We have at least three : CP- , Tucker- , Tensor_Train-rank . For these different definitions of rank , there are correspondingly different ways to extend the nuclear norm . Some of those are easy , e.g. , Tucker-rank and Tensor_Train-rank , for which we can define the tensor nuclear norm as a sum of nuclear norms of unfolded matrices from the tensor . CP-rank is tricky . We have not figured out an analytical form of nuclear norm corresponding to it , unless we make some ( very strong ) assumptions , e.g. , assuming the tensor is orthogonally decomposable . Another challenge is optimisation . It is true that we can derive the ( sub- ) gradient of nuclear norm , thus technically we can apply a gradient descent method for it . However , optimisation experts advised us not to do so because the nuclear norm is essentially non-differentiable . A better alternative is semidefinite programming . However , deep neural networks are usually trained by gradient descent , and it is challenging to marry these two different optimisation strategies . Nevertheless , we tried some easy solutions and obtained some interesting results . If the reviewer is interested in this topic , the code and technical report can be found in https : //github.com/wOOL/TNRDMTL . We are keen to hear your views on this direction , as you mention `` nuclear norm regularization can also be extended to deep learning as gradient descent are popular '' ."}, {"review_id": "SkhU2fcll-1", "review_text": "The paper proposed a tensor factorization approach for MTL to learn cross task structures for better generalization. The presentation is clean and clear and experimental justification is convincing. As mentioned, including discussions on the effect of model size vs. performance would be useful in the final version and also work in other fields related to this. One question on Sec. 3.3, to build the DMTRL, one DNN per-task is trained with the same architecture. How important is this pretraining? Would random initialization also work here? If the data is unbalanced, namely, some classes have very few examples, how would that affect the model? ", "rating": "7: Good paper, accept", "reply_text": "-- - Random initialisation In our experiments , we found that the performance is not sensitive to STL-based vs Random initialisation , thus both can be used with our framework . The important aspect of making random initialisation work well is as follows : Recall that what our model learned is * NOT * the tensor itself , but the factors of tensor , so we are always talking about initialising factors , from which the tensor is constructed by multiplying them out . Randomly initialising those factors is not a good idea , because it is not straightforward to control the distribution of resulting tensor . E.g. , you initialise two weight matrices from a specific Gaussian distribution , but the dot-product of them is clearly not the same distribution . It would have some extremely large/small values , which is a very bad starting point for the first round of forward-backward pass . Therefore , if random initialisation is desired , a solution is to initialise the whole tensor to a suitable distribution of weights first , then do decomposition , and use the decomposed values for initialising the factors . In this way , the resulting re-composed tensor after multiplication has approximately the intended distribution of weight values . While STL and the above random-based initialisation strategies perform similarly , our STL-based strategy has the advantage that it makes the choice of rank easier and more intuitive . If random initialisation is used , every tensor 's low-rank choice ( s ) must be specified by the user . ( Because there is no low-rank structure in a random tensor that can be found automatically ) . However , if you stack the STL models , the formed tensor already has a low-rank structure . E.g. , the first convolutional layers are likely to look similar for different tasks/domains ( like Gabor filters ) . Thus , analysing the rank of the stacked STL tensor gives you a good heuristic to set the ranks of the entire network . There is then only one hyper parameter of the entire process , the reconstruction error threshold used to choose the ranks , which has the straightforward interpretation of `` prior on sharing strength '' . -- - Unbalanced tasks/classes Tasks : The implementation of our loss function is the average of mean error of each task . For each task , we get the mean of its instances ' errors , and then we take the average of all those mean errors . This protects the tasks with few instances , because if the loss function was designed to be the mean error of all instances in all tasks , tasks with very small data would be down-weighted . By default , all our tasks are equally weighted . However , the user is free to specify a non-uniform per-task weight , so they can make something like `` one main task , several less important side tasks '' . It is also good practice to normalise the errors from different tasks so they are on a similar scale . Especially when your tasks are very different ( e.g. , one task is classification , another is regression ) . Classes : For unbalanced classification problem , there are various classic solutions like re-sampling , class-wise re-weighting , optimisation on AUC instead of accuracy , etc . As our method is about modelling the weights of a neural network , it can work with any of these specially designed losses . All of these are good-practice engineering points , however , they are not key to our methodology . -- - Revised version We will add more discussions that address the questions you mentioned before in the revised version ."}, {"review_id": "SkhU2fcll-2", "review_text": "This paper proposed a deep multi-task representation learning framework that learns cross-task sharing structure at every layer in a deep network with tensor factorization and end-to-end knowledge sharing. This approach removed the requirement of a user-de\ufb01ned multi-task sharing strategy in conventional approach. Their experimental results indicate that their approach can achieve higher accuracy with fewer design choices. Although factorization ideas have been exploited in the past for other tasks I think applying it to MTL is interesting. The only thing I want to point out is that the saving of parameter is from the low-rank factorization. In the conventional MTL each layer's weight size can also be reduced if SVD is used. BTW, recent neural network MTL was explored first (earlier than 2014, 2015 work cited) in speech recognition community. see, e.g., Huang, J.T., Li, J., Yu, D., Deng, L. and Gong, Y., 2013, May. Cross-language knowledge transfer using multilingual deep neural network with shared hidden layers. In 2013 IEEE International Conference on Acoustics, Speech and Signal Processing (pp. 7304-7308). IEEE.", "rating": "8: Top 50% of accepted papers, clear accept", "reply_text": "-- - SVD in the conventional MTL It is possible to reduce the number of parameters in the conventional MTL via SVD or other factorisation techniques , while it is for neural network compression purpose , not for knowledge sharing among tasks . -- - Earlier work Thanks for mentioning the earlier work in neural network MTL from speech recognition community , we will add the reference in the revised version ."}], "0": {"review_id": "SkhU2fcll-0", "review_text": "The paper proposed a nice framework leveraging Tucker and Tensor train low-rank tensor factorization to induce parameter sharing for multi-task learning. The framework is nice and appealing. However, MTL is a very well studied problem and the paper considers simple task for different classification, and it is not clear if we really need \"Deep Learning\" for these simple datasets. A comparison with existing shallow MTL is necessary to show the benefits of the proposed methods (and in particular being deep) on the dataset. The authors ignore them on the basis of speculation and it is not clear if the proposed framework is really superior to simple regularizations like the nuclear norm. The idea of nuclear norm regularization can also be extended to deep learning as gradient descent are popular in all methods. ", "rating": "5: Marginally below acceptance threshold", "reply_text": "-- - Comparison with classic ( shallow ) MTL methods As the reviewer asked , we provide a comparison with classic MTL methods for the first experiment ( MNIST , binary one-vs-rest classification , 1 % training data , mean of error rates for 10-fold ) . PCA feature is obtained by flattening the image then dimension reduction by PCA . CNN feature is obtained by the penultimate layer of the CNN network used in our experiment ( a variant of LeNet ) . + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | | PCA Feature | CNN Feature | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | Single Task Learning | 16.89 | 11.52 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | Evgeniou & Pontil , 2004 | 15.27 | 10.32 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | Argyriou et al. , 2008 | 15.64 | 9.56 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | Kumar & Daume III , 2012 | 14.08 | 9.41 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | DMTRL-LAF | N.A . | 8.25 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | DMTRL-Tucker | N.A . | 9.24 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | DMTRL-TT | N.A . | 7.31 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ | UD-MTL | N.A . | 9.34 | + -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -+ -- -- -- -- -- -- -+ We have previously tried classic MTL methods in our experiments , and DMTRL decisively outperforms them throughout . Despite these positive results , this comparison was deliberately excluded in the paper , and we briefly explained why in Section 4.1 . Here we detail the reasons : 1 ) As seen above , PCA feature is not competitive with deep learning . This also answers the reviewer 's question about if deep learning is necessary here . 2 ) From an experimental design view , it is not a very scientific comparison to make . If our DMTRL outperforms classic MTL methods with PCA feature : it is not clear if the difference is due to better MTL strategy ( ours v.s.others ) or more discriminative feature ( CNN v.s.PCA ) .Alternatively , we can replace the PCA feature by CNN feature ( second column of above table ) . Then classic MTL methods have two steps : feature extraction via CNN and classifier training by the MTL method . Again we can not conclude that our method is better because the difference could be due to either the MTL method itself , or the optimisation procedure : ours is end-to-end training , and classic MTL + CNN feature approaches have two independent steps . Therefore , when we designed the experiments , we made sure that all competitors are ( i ) trained in an end-to-end fashion ( ii ) all based on the same CNN architecture . Then we can confidently say that any performance difference is due to different MTL methods , rather than other factors . 3 ) Classic MTL methods can be a valid baseline for the first experiment only because they are binary classification problems . In the first experiment we cast a multi-class classification problem into multiple binary classification problems , so each class is a task . Though this is a well established setting in MTL benchmarking , for many practical problems , esp . those needing deep models , each task itself is a multi-class classification problem . We denote this setting as heterogeneous MTL ( i.e. , our second and third experiment ) . This setting is usually addressed by some user-defined neural network architecture , and a typical design of which is to keep the bottom layers ' parameters tied , and each task has its own top layer ( s ) parameters . One of the key motivations of this work is to eliminate the need for manually designing such a topology ; instead finding it in a data-driven way . Classic MTL methods , in general , can not apply to this setting of multiple tasks where each task has multiple classes . Despite these caveats , we can easily add comparisons to the classic MTL methods in the final version . -- - Positioning of this submission We agree if a problem is well solved by shallow methods , it is not necessary to get deep learning involved . The reviewer may be aware that some very classic MTL problems ( datasets ) are not evaluated in this submission , for example , School Dataset , Computer Survey Dataset . The reason is exactly what the reviewer mentioned : you do not need deep learning for these datasets . The experiments in this submission are object recognition problems from computer vision community , and for those problems , deep learning ( CNN ) has a clear advantage . Then it is desirable to find a systematic way to add MTL upon deep learning . In summary , the need of deep learning comes first . -- - Extending nuclear norm to deep learning We appreciate the reviewer mentioned this point , and coincidentally it is our on-going project . Even though it is totally out of scope of reviewing this submission , we can share some thoughts on this direction . The nuclear ( trace ) norm is defined for matrix , and has a close connection to matrix rank . Thus , some work based on the assumption of low-rank matrix , e.g. , multi-task learning and matrix completion , use it as a regularisation term . The parameters in deep learning or deep MTL are usually in a form of higher-order ( > =3 ) tensors . But it is not straightforward to extend nuclear norm from matrices to tensors , because tensor rank is non-uniquely defined . We have at least three : CP- , Tucker- , Tensor_Train-rank . For these different definitions of rank , there are correspondingly different ways to extend the nuclear norm . Some of those are easy , e.g. , Tucker-rank and Tensor_Train-rank , for which we can define the tensor nuclear norm as a sum of nuclear norms of unfolded matrices from the tensor . CP-rank is tricky . We have not figured out an analytical form of nuclear norm corresponding to it , unless we make some ( very strong ) assumptions , e.g. , assuming the tensor is orthogonally decomposable . Another challenge is optimisation . It is true that we can derive the ( sub- ) gradient of nuclear norm , thus technically we can apply a gradient descent method for it . However , optimisation experts advised us not to do so because the nuclear norm is essentially non-differentiable . A better alternative is semidefinite programming . However , deep neural networks are usually trained by gradient descent , and it is challenging to marry these two different optimisation strategies . Nevertheless , we tried some easy solutions and obtained some interesting results . If the reviewer is interested in this topic , the code and technical report can be found in https : //github.com/wOOL/TNRDMTL . We are keen to hear your views on this direction , as you mention `` nuclear norm regularization can also be extended to deep learning as gradient descent are popular '' ."}, "1": {"review_id": "SkhU2fcll-1", "review_text": "The paper proposed a tensor factorization approach for MTL to learn cross task structures for better generalization. The presentation is clean and clear and experimental justification is convincing. As mentioned, including discussions on the effect of model size vs. performance would be useful in the final version and also work in other fields related to this. One question on Sec. 3.3, to build the DMTRL, one DNN per-task is trained with the same architecture. How important is this pretraining? Would random initialization also work here? If the data is unbalanced, namely, some classes have very few examples, how would that affect the model? ", "rating": "7: Good paper, accept", "reply_text": "-- - Random initialisation In our experiments , we found that the performance is not sensitive to STL-based vs Random initialisation , thus both can be used with our framework . The important aspect of making random initialisation work well is as follows : Recall that what our model learned is * NOT * the tensor itself , but the factors of tensor , so we are always talking about initialising factors , from which the tensor is constructed by multiplying them out . Randomly initialising those factors is not a good idea , because it is not straightforward to control the distribution of resulting tensor . E.g. , you initialise two weight matrices from a specific Gaussian distribution , but the dot-product of them is clearly not the same distribution . It would have some extremely large/small values , which is a very bad starting point for the first round of forward-backward pass . Therefore , if random initialisation is desired , a solution is to initialise the whole tensor to a suitable distribution of weights first , then do decomposition , and use the decomposed values for initialising the factors . In this way , the resulting re-composed tensor after multiplication has approximately the intended distribution of weight values . While STL and the above random-based initialisation strategies perform similarly , our STL-based strategy has the advantage that it makes the choice of rank easier and more intuitive . If random initialisation is used , every tensor 's low-rank choice ( s ) must be specified by the user . ( Because there is no low-rank structure in a random tensor that can be found automatically ) . However , if you stack the STL models , the formed tensor already has a low-rank structure . E.g. , the first convolutional layers are likely to look similar for different tasks/domains ( like Gabor filters ) . Thus , analysing the rank of the stacked STL tensor gives you a good heuristic to set the ranks of the entire network . There is then only one hyper parameter of the entire process , the reconstruction error threshold used to choose the ranks , which has the straightforward interpretation of `` prior on sharing strength '' . -- - Unbalanced tasks/classes Tasks : The implementation of our loss function is the average of mean error of each task . For each task , we get the mean of its instances ' errors , and then we take the average of all those mean errors . This protects the tasks with few instances , because if the loss function was designed to be the mean error of all instances in all tasks , tasks with very small data would be down-weighted . By default , all our tasks are equally weighted . However , the user is free to specify a non-uniform per-task weight , so they can make something like `` one main task , several less important side tasks '' . It is also good practice to normalise the errors from different tasks so they are on a similar scale . Especially when your tasks are very different ( e.g. , one task is classification , another is regression ) . Classes : For unbalanced classification problem , there are various classic solutions like re-sampling , class-wise re-weighting , optimisation on AUC instead of accuracy , etc . As our method is about modelling the weights of a neural network , it can work with any of these specially designed losses . All of these are good-practice engineering points , however , they are not key to our methodology . -- - Revised version We will add more discussions that address the questions you mentioned before in the revised version ."}, "2": {"review_id": "SkhU2fcll-2", "review_text": "This paper proposed a deep multi-task representation learning framework that learns cross-task sharing structure at every layer in a deep network with tensor factorization and end-to-end knowledge sharing. This approach removed the requirement of a user-de\ufb01ned multi-task sharing strategy in conventional approach. Their experimental results indicate that their approach can achieve higher accuracy with fewer design choices. Although factorization ideas have been exploited in the past for other tasks I think applying it to MTL is interesting. The only thing I want to point out is that the saving of parameter is from the low-rank factorization. In the conventional MTL each layer's weight size can also be reduced if SVD is used. BTW, recent neural network MTL was explored first (earlier than 2014, 2015 work cited) in speech recognition community. see, e.g., Huang, J.T., Li, J., Yu, D., Deng, L. and Gong, Y., 2013, May. Cross-language knowledge transfer using multilingual deep neural network with shared hidden layers. In 2013 IEEE International Conference on Acoustics, Speech and Signal Processing (pp. 7304-7308). IEEE.", "rating": "8: Top 50% of accepted papers, clear accept", "reply_text": "-- - SVD in the conventional MTL It is possible to reduce the number of parameters in the conventional MTL via SVD or other factorisation techniques , while it is for neural network compression purpose , not for knowledge sharing among tasks . -- - Earlier work Thanks for mentioning the earlier work in neural network MTL from speech recognition community , we will add the reference in the revised version ."}}