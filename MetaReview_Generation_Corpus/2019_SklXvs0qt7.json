{"year": "2019", "forum": "SklXvs0qt7", "title": "Curiosity-Driven Experience Prioritization via Density Estimation", "decision": "Reject", "meta_review": "The manuscript describes a procedure for prioritizing the contents of an experience replay buffer in a UVFA setting based on a density model of the trajectory of the achieved goal states. A rank-based transformation of densities is used to stochastically prioritize the replay memory.\n\nReducing the sample complexity of RL is a worthy goal and reviewers found the overall approach is interesting, if somewhat arbitrary in the implementation details. Concerns were raised about clarity and justification, and the restriction of experiments to fully deterministic environments.\n\nAfter personally reading the updated manuscript I found clarity to still be lacking. Statements like \"... uses the ranking number (starting from zero) directly as the probability for sampling\" -- this is not true (it is normalized, as confusingly laid out in equation 2 with the same symbol used for the unnormalized and normalized densities), and also implies that the least likely trajectory under the model is never sampled, which doesn't seem like a desirable property. Schaul's \"prioritized experience replay\" is cited for the choice of rank-based distribution, but the distribution employed in that work has rather different form. The related work section is also very poor given the existing body of literature on curiosity in a reinforcement learning context, and the new \"importance sampling perspective\" section serves little explicatory purpose given that an importance re-weighting is not performed. \n\nOverall, I concur most strongly with AnonReviewer1 that more work is needed to motivate the method and prove its robustness applicability, as well as to polish the presentation.", "reviews": [{"review_id": "SklXvs0qt7-0", "review_text": "The paper proposes a novel method for sampling examples for experience replay. It addresses the problem of having inbalanced data (in the experience buffer during training). The authors trained a density model and replay the trajectories that has a low density under the model. Novelty: The approach is related to prioritized experience replay, PER is computational expensive because of the TD error update, in comparison, CDR only updates trajectory density once per trajectory. Clarity: The paper seems to lack clarity on certain design/ architecture/ model decisions. For example, the authors did not justify why VGMM model was chosen and how does it compare to other density estimators. Also, I had to go through a large chunk of the paper before coming across the exact setup. I think the paper could benefit from having this in the earlier sections. Other comments about the paper: - I do like the idea of the paper. It also seems that curiosity in this context seems to be very related to surprise? There are neuroscience evidence indicating that humans turns to remember (putting more weights) on events that are more surprising. - The entire trajectory needs to be stored, so the memory wold grow with episode length. I could see this being an issue when episode length is too long. ", "rating": "6: Marginally above acceptance threshold", "reply_text": "Thank you for the valuable feedback ! We uploaded a revised version of the paper based on the comments . - To improve the clarity , we clarify why we chose to use V-GMM , among the three basic density estimation methods , including KDE , GMM , and V-GMM . ( in the revised version of the paper Section \u201c 2.3 Density Estimation Methods \u201d ) The reasons are the following : 1 . GMM can be trained reasonably fast for RL agents . GMM is also much faster in inference compared to Kernel Density Estimate ( KDE ) ( Rosenblatt , 1956 ) . 2.Compared to GMM , V-GMM has a natural tendency to set some mixing coefficients close to zero and generalizes better . 3.We only use a basic density estimation method , such as V-GMM , in our framework as a proof of concept for the idea \u201c Curiosity-Driven Experience Prioritization via Density Estimation \u201d . Other destiny estimation methods can also be applied in this framework . - We move the exact setup ( Section \u201c 2.1 Environments \u201d in the new version ) in early sections to improve the clarity of the paper . - We are glad that you like the idea of the paper . Yes , indeed the curiosity mechanism in our context is related to surprise . The idea of our method is also related to neuroscience ( Gruber et al. , 2014 ) . - Yes , the entire trajectories need to stored in the replay buffer and the memory size increases as the trajectory length increases . However , this is a general issue with off-policy RL methods which uses experience replay , such as DQN and DDPG . Our method CDP only uses the trajectories that are already in the memory , so CDP does not introduce additional memory usage ."}, {"review_id": "SklXvs0qt7-1", "review_text": "This paper addresses a problem that arises in \"universal\" value-function approximation (that is, reinforcement-learning when a current goal is included as part of the input); when doing experience replay, the experience buffer might have much more representation of some goals than others, and it's important to keep the training appropriately balanced over goals. So, the idea is to a kind of importance weighting of the trajectory memory, by doing a density estimation on the goal distribution represented in the memory and then sample them for training in a way that is inversely related to their densities. This method results in a moderate improvement in the effectiveness of DDPG, compared to the previous method for hindsight experience replay. The idea is intuitively sensible, but I believe this paper falls short of being ready for publication for three major reasons. First, the mechanism provided has no mathematical justification--it seems fairly arbitrary. Even if it's not possible to prove something about this strategy, it would be useful to just state a desirable property that the sampling mechanism should have and then argue informally that this mechanism has that property. As it is, it's just one point in a large space of possible mechanisms. I have a substantial concern that this method might end up assigning a high likelihood of resampling trajectories where something unusual happened, not because of the agent's actions, but because of the world having made a very unusual stochastic transition. If that's true, then this distribution would be very bad for training a value function, which is supposed to involve an expectation over \"nature\"'s choices in the MDP. Second, the experiments are (as I understand it, but I may be wrong) in deterministic domains, which definitely does not constitute a general test of a proposed RL method. - I'm not sure we can conclude much from the results on fetchSlide (and it would make sense not to use the last set of parameters but the best one encountered during training) - What implementation of the other algorithms did you use? Third, the writing in the paper has some significant lapses in clarity. I was a substantial way through the paper before understanding exactly what the set-up was; in particular, exactly what \"state\" meant was not clear. I would suggest saying something like s = ((x^g, x^c), g) where s is a state from the perspective of value iteration, (x^g, x^c) is a state of the system, which is a vector of values divided into two sub-vectors, x^g is the part of the system state that involves the state variables that are specified in the goal, x^c (for 'context') is the rest of the system state, and g is the goal. The dimensions of x^g and g should line up. - This sentence was particularly troublesome: \"Each state s_t also includes the state of the achieved goal, meaning the goal state is a subset of the normal state. Here, we overwrite the notation s_t as the achieved goal state, i.e., the state of the object.\" - Also, it's important to say what the goal actually is, since it doesn't make sense for it to be a point in a continuous space. (You do say this later, but it would be helpful to the reader to say it earlier.) ", "rating": "4: Ok but not good enough - rejection", "reply_text": "Thank you for the valuable feedback ! We uploaded a revised version of the paper based on the comments . - We added a mathematical justification paragraph in Section 3.3 \u201c An Importance Sampling Perspective \u201d . We argue that to estimate the integral of the loss function L ( \u03c4 ) of the RL agent efficiently , we need to draw samples \u03c4 from the buffer in regions which have a high probability , p ( \u03c4 ) , but also where L| ( \u03c4 ) | is large . Since , p ( \u03c4 ) is a uniform distribution , i.e. , the agent replays trajectories at random , we only need to draw samples which has large errors L| ( \u03c4 ) | . The result can be highly efficient , meaning the agent needs less samples than sampling from the uniform distribution p ( \u03c4 ) . The CDP framework finds the samples that have large errors based on the \u2018 surprise \u2019 of the trajectory . Any density estimation method that can approximate the trajectory density can provide a more efficient proposal distribution q ( \u03c4 ) than the uniform distribution p ( \u03c4 ) . The sampling mechanism should have a property of oversampling trajectories with larger errors/ \u2018 surprise \u2019 . - To mitigate the influence of very unusual stochastic transitions , we use the ranking instead of the density directly . The reason is that the rank-based variant is more robust because it is not affected by outliers nor by density magnitudes . Furthermore , its heavy-tail property also guarantees that samples will be diverse ( Schaul et al. , 2015b ) . - Yes , the experiments are mostly in deterministic domains . - In the FetchSlide environment , the best-learned policy of CDP outperforms the baselines and PER , as shown in Table 1 . Yes , we did not use the last set of parameters but used the best one encountered during training , as described in Section 4 \u201c Experiments \u201d : \u201c After training , we use the best-learned policy as the final policy and test it in the environment . The testing results are the final mean success rates. \u201c - Our implementation is based on \u201c OpenAI Baselines \u201d , which provides HER . We combined HER with PER in \u201c OpenAI Baselines \u201d . OpenAI Baselines link : https : //github.com/openai/baselines - To improve the clarity of the paper , we move the exact set-up into the earlier section , Section 2.1 \u201c Environments \u201d . In this section , we also redefine the \u201c state \u201d based on your suggestions . We delete the \u201c troublesome \u201d sentence and also clarify what the goal actually is in Section 2.1 . For more detail , please read the revised paper , Section 2.1 ."}, {"review_id": "SklXvs0qt7-2", "review_text": "This work considers a version of importance sampling of states from the replay buffer. Each trajectory is assigned a rank, inversely proportional to its probability according to a GMM. The trajectories with lower rank are preferred at sampling. Main issues: 1. Estimating rank from a density estimator - the reasoning behind picking VGMM as the density estimator is not fully convincing and (dis)advantages of other candidate density estimators are almost not highlighted. - it is unclear and possibly could be better explained why one needs to concatenate the goals (what would change if we would not concatenate but estimate state densities rather than trajectories?) 2. Generalization issues - the method is not applicable to episodes of different length - the approach assumes existence of a state to goal function f(s)->g - although the paper does not expose this point (it is discussed the HER paper) 3. Scaling issues - length of the vector grows linearly with the episode length - length of the vector grows linearly with the size of the goal vector For long episodes or episodes with large goal vectors it is quite possible that there will not be enough data to fit the GMM model or one would need to collect many samples prior. 4. Minor issues - 3.3 \"It is known that PER can become very expensive in computational time\" - please supply a reference - 3.3 \"After each update of the model, the agent needs to update the priorities of the transitions in the replay buffer with the new TD-errors\" - However the method only renews priorities of randomly selected transitions (why would there be a large overhead?). Here is from the PER paper \"Our final implementation for rank-based prioritization produced an additional 2%-4% increase in running time and negligible additional memory usage\" ", "rating": "6: Marginally above acceptance threshold", "reply_text": "Thank you for the valuable feedback ! We uploaded a revised version of the paper based on the comments . - The reason behind using V-GMM is that V-GMM is much faster than KDE in inference and has a better generalization ability compared to GMM . We use V-GMM as a proof of concept for the idea \u201c Curiosity-Driven Experience Prioritization via Density Estimation \u201d . Other density estimation methods can also be applied . We now clarify these reasons in Section \u201c 2.3 Density Estimation Methods \u201d of the revised paper . - We concatenate the goals and estimate the trajectory density instead of state density because HER needs to sample a future state in the trajectory as a virtual goal for training . - For episodes of different length , we can pad or truncate the trajectories into same lengths and apply V-GMM . Another method is to use PCA or auto-encoder to reduce the dimension into a fixed size and then apply CDP . - Similarly , to handle scaling issues , for very high dimension vectors , we can first apply dimension reduction methods , such as PCA and auto-encoder , and then use CDP . - The reference for `` It is known that PER can become very expensive in computational time \u201d is actually the \u201c Prioritized Experience Replay \u201d paper itself . On page three of the PER paper , it writes \u201c Implementation : To scale to large memory sizes N , we use a binary heap data structure for the priority queue , for which finding the maximum priority transition when sampling is O ( 1 ) and updating priorities ( with the new TD-error after a learning step ) is O ( log N ) . See Appendix B.2.1 for more details . \u201c In their Atari case , the memory size N is of 1e4 transitions . In our hand manipulation environment cases , the memory size N is of 1e6 trajectories , and each trajectory has 100 transitions . Thus , the memory size is 1e4 ( theirs ) vs 1e8 ( ours ) . The complexity of updating priorities is O ( log N ) . Therefore , PER is very expensive in computational time , at least in our case . The memory buffer size N can be found in OpenAI Baselines link : https : //github.com/openai/baselines"}], "0": {"review_id": "SklXvs0qt7-0", "review_text": "The paper proposes a novel method for sampling examples for experience replay. It addresses the problem of having inbalanced data (in the experience buffer during training). The authors trained a density model and replay the trajectories that has a low density under the model. Novelty: The approach is related to prioritized experience replay, PER is computational expensive because of the TD error update, in comparison, CDR only updates trajectory density once per trajectory. Clarity: The paper seems to lack clarity on certain design/ architecture/ model decisions. For example, the authors did not justify why VGMM model was chosen and how does it compare to other density estimators. Also, I had to go through a large chunk of the paper before coming across the exact setup. I think the paper could benefit from having this in the earlier sections. Other comments about the paper: - I do like the idea of the paper. It also seems that curiosity in this context seems to be very related to surprise? There are neuroscience evidence indicating that humans turns to remember (putting more weights) on events that are more surprising. - The entire trajectory needs to be stored, so the memory wold grow with episode length. I could see this being an issue when episode length is too long. ", "rating": "6: Marginally above acceptance threshold", "reply_text": "Thank you for the valuable feedback ! We uploaded a revised version of the paper based on the comments . - To improve the clarity , we clarify why we chose to use V-GMM , among the three basic density estimation methods , including KDE , GMM , and V-GMM . ( in the revised version of the paper Section \u201c 2.3 Density Estimation Methods \u201d ) The reasons are the following : 1 . GMM can be trained reasonably fast for RL agents . GMM is also much faster in inference compared to Kernel Density Estimate ( KDE ) ( Rosenblatt , 1956 ) . 2.Compared to GMM , V-GMM has a natural tendency to set some mixing coefficients close to zero and generalizes better . 3.We only use a basic density estimation method , such as V-GMM , in our framework as a proof of concept for the idea \u201c Curiosity-Driven Experience Prioritization via Density Estimation \u201d . Other destiny estimation methods can also be applied in this framework . - We move the exact setup ( Section \u201c 2.1 Environments \u201d in the new version ) in early sections to improve the clarity of the paper . - We are glad that you like the idea of the paper . Yes , indeed the curiosity mechanism in our context is related to surprise . The idea of our method is also related to neuroscience ( Gruber et al. , 2014 ) . - Yes , the entire trajectories need to stored in the replay buffer and the memory size increases as the trajectory length increases . However , this is a general issue with off-policy RL methods which uses experience replay , such as DQN and DDPG . Our method CDP only uses the trajectories that are already in the memory , so CDP does not introduce additional memory usage ."}, "1": {"review_id": "SklXvs0qt7-1", "review_text": "This paper addresses a problem that arises in \"universal\" value-function approximation (that is, reinforcement-learning when a current goal is included as part of the input); when doing experience replay, the experience buffer might have much more representation of some goals than others, and it's important to keep the training appropriately balanced over goals. So, the idea is to a kind of importance weighting of the trajectory memory, by doing a density estimation on the goal distribution represented in the memory and then sample them for training in a way that is inversely related to their densities. This method results in a moderate improvement in the effectiveness of DDPG, compared to the previous method for hindsight experience replay. The idea is intuitively sensible, but I believe this paper falls short of being ready for publication for three major reasons. First, the mechanism provided has no mathematical justification--it seems fairly arbitrary. Even if it's not possible to prove something about this strategy, it would be useful to just state a desirable property that the sampling mechanism should have and then argue informally that this mechanism has that property. As it is, it's just one point in a large space of possible mechanisms. I have a substantial concern that this method might end up assigning a high likelihood of resampling trajectories where something unusual happened, not because of the agent's actions, but because of the world having made a very unusual stochastic transition. If that's true, then this distribution would be very bad for training a value function, which is supposed to involve an expectation over \"nature\"'s choices in the MDP. Second, the experiments are (as I understand it, but I may be wrong) in deterministic domains, which definitely does not constitute a general test of a proposed RL method. - I'm not sure we can conclude much from the results on fetchSlide (and it would make sense not to use the last set of parameters but the best one encountered during training) - What implementation of the other algorithms did you use? Third, the writing in the paper has some significant lapses in clarity. I was a substantial way through the paper before understanding exactly what the set-up was; in particular, exactly what \"state\" meant was not clear. I would suggest saying something like s = ((x^g, x^c), g) where s is a state from the perspective of value iteration, (x^g, x^c) is a state of the system, which is a vector of values divided into two sub-vectors, x^g is the part of the system state that involves the state variables that are specified in the goal, x^c (for 'context') is the rest of the system state, and g is the goal. The dimensions of x^g and g should line up. - This sentence was particularly troublesome: \"Each state s_t also includes the state of the achieved goal, meaning the goal state is a subset of the normal state. Here, we overwrite the notation s_t as the achieved goal state, i.e., the state of the object.\" - Also, it's important to say what the goal actually is, since it doesn't make sense for it to be a point in a continuous space. (You do say this later, but it would be helpful to the reader to say it earlier.) ", "rating": "4: Ok but not good enough - rejection", "reply_text": "Thank you for the valuable feedback ! We uploaded a revised version of the paper based on the comments . - We added a mathematical justification paragraph in Section 3.3 \u201c An Importance Sampling Perspective \u201d . We argue that to estimate the integral of the loss function L ( \u03c4 ) of the RL agent efficiently , we need to draw samples \u03c4 from the buffer in regions which have a high probability , p ( \u03c4 ) , but also where L| ( \u03c4 ) | is large . Since , p ( \u03c4 ) is a uniform distribution , i.e. , the agent replays trajectories at random , we only need to draw samples which has large errors L| ( \u03c4 ) | . The result can be highly efficient , meaning the agent needs less samples than sampling from the uniform distribution p ( \u03c4 ) . The CDP framework finds the samples that have large errors based on the \u2018 surprise \u2019 of the trajectory . Any density estimation method that can approximate the trajectory density can provide a more efficient proposal distribution q ( \u03c4 ) than the uniform distribution p ( \u03c4 ) . The sampling mechanism should have a property of oversampling trajectories with larger errors/ \u2018 surprise \u2019 . - To mitigate the influence of very unusual stochastic transitions , we use the ranking instead of the density directly . The reason is that the rank-based variant is more robust because it is not affected by outliers nor by density magnitudes . Furthermore , its heavy-tail property also guarantees that samples will be diverse ( Schaul et al. , 2015b ) . - Yes , the experiments are mostly in deterministic domains . - In the FetchSlide environment , the best-learned policy of CDP outperforms the baselines and PER , as shown in Table 1 . Yes , we did not use the last set of parameters but used the best one encountered during training , as described in Section 4 \u201c Experiments \u201d : \u201c After training , we use the best-learned policy as the final policy and test it in the environment . The testing results are the final mean success rates. \u201c - Our implementation is based on \u201c OpenAI Baselines \u201d , which provides HER . We combined HER with PER in \u201c OpenAI Baselines \u201d . OpenAI Baselines link : https : //github.com/openai/baselines - To improve the clarity of the paper , we move the exact set-up into the earlier section , Section 2.1 \u201c Environments \u201d . In this section , we also redefine the \u201c state \u201d based on your suggestions . We delete the \u201c troublesome \u201d sentence and also clarify what the goal actually is in Section 2.1 . For more detail , please read the revised paper , Section 2.1 ."}, "2": {"review_id": "SklXvs0qt7-2", "review_text": "This work considers a version of importance sampling of states from the replay buffer. Each trajectory is assigned a rank, inversely proportional to its probability according to a GMM. The trajectories with lower rank are preferred at sampling. Main issues: 1. Estimating rank from a density estimator - the reasoning behind picking VGMM as the density estimator is not fully convincing and (dis)advantages of other candidate density estimators are almost not highlighted. - it is unclear and possibly could be better explained why one needs to concatenate the goals (what would change if we would not concatenate but estimate state densities rather than trajectories?) 2. Generalization issues - the method is not applicable to episodes of different length - the approach assumes existence of a state to goal function f(s)->g - although the paper does not expose this point (it is discussed the HER paper) 3. Scaling issues - length of the vector grows linearly with the episode length - length of the vector grows linearly with the size of the goal vector For long episodes or episodes with large goal vectors it is quite possible that there will not be enough data to fit the GMM model or one would need to collect many samples prior. 4. Minor issues - 3.3 \"It is known that PER can become very expensive in computational time\" - please supply a reference - 3.3 \"After each update of the model, the agent needs to update the priorities of the transitions in the replay buffer with the new TD-errors\" - However the method only renews priorities of randomly selected transitions (why would there be a large overhead?). Here is from the PER paper \"Our final implementation for rank-based prioritization produced an additional 2%-4% increase in running time and negligible additional memory usage\" ", "rating": "6: Marginally above acceptance threshold", "reply_text": "Thank you for the valuable feedback ! We uploaded a revised version of the paper based on the comments . - The reason behind using V-GMM is that V-GMM is much faster than KDE in inference and has a better generalization ability compared to GMM . We use V-GMM as a proof of concept for the idea \u201c Curiosity-Driven Experience Prioritization via Density Estimation \u201d . Other density estimation methods can also be applied . We now clarify these reasons in Section \u201c 2.3 Density Estimation Methods \u201d of the revised paper . - We concatenate the goals and estimate the trajectory density instead of state density because HER needs to sample a future state in the trajectory as a virtual goal for training . - For episodes of different length , we can pad or truncate the trajectories into same lengths and apply V-GMM . Another method is to use PCA or auto-encoder to reduce the dimension into a fixed size and then apply CDP . - Similarly , to handle scaling issues , for very high dimension vectors , we can first apply dimension reduction methods , such as PCA and auto-encoder , and then use CDP . - The reference for `` It is known that PER can become very expensive in computational time \u201d is actually the \u201c Prioritized Experience Replay \u201d paper itself . On page three of the PER paper , it writes \u201c Implementation : To scale to large memory sizes N , we use a binary heap data structure for the priority queue , for which finding the maximum priority transition when sampling is O ( 1 ) and updating priorities ( with the new TD-error after a learning step ) is O ( log N ) . See Appendix B.2.1 for more details . \u201c In their Atari case , the memory size N is of 1e4 transitions . In our hand manipulation environment cases , the memory size N is of 1e6 trajectories , and each trajectory has 100 transitions . Thus , the memory size is 1e4 ( theirs ) vs 1e8 ( ours ) . The complexity of updating priorities is O ( log N ) . Therefore , PER is very expensive in computational time , at least in our case . The memory buffer size N can be found in OpenAI Baselines link : https : //github.com/openai/baselines"}}