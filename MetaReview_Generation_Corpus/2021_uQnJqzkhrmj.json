{"year": "2021", "forum": "uQnJqzkhrmj", "title": "Ranking Cost: One-Stage Circuit Routing by Directly Optimizing Global Objective Function", "decision": "Reject", "meta_review": "The paper studies an interesting problem motivated by VLSI design. The reviewers agree that there are interesting aspects of the RC algorithm. Nevertheless, the paper could be improved by a clearer characterization/apples-to-apples comparison to baselines, particularly regarding computation cost, use of parallelism, as well as a more thorough contrast to state of the art in general. Given the contribution is experimental, and this is a well studied problem, it is important to establish whether the solution is indeed best-in-class; cost due to training should be taken into account, and minimized to the extend possible. Going beyond the baselines considered here, as well as reviewing possible theoretical connections to other problems and guarantees, would also strengthen the paper.", "reviews": [{"review_id": "uQnJqzkhrmj-0", "review_text": "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Summary : In this paper the authors attempt to solve the circuit routing problem through a novel approach of combining search-based routing techniques ( e.g.A * search ) and evolutionary strategies ( e.g.OpenAI-ES ) . The authors define new parameters e.g.cost maps and a ranking parameter which improve the efficiency and effectiveness of their circuit routing solution . As opposed to heuristics based ( 2-step ) routing solutions , the authors develop a solution which optimizes a single global cost function . This makes the solution easily scalable to new constraints and designs while avoiding sub-optimal solutions ( common problem for 2-stage routing ) . The authors show that their approach doesn \u2019 t require human demonstrations or training data of any kind thereby giving their solution an edge over learning-based techniques requiring training data . Lastly , through experiments the authors establish that their approach is scalable to larger applications . # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Reasons for score : The authors present an all-round discussion for the different approaches to solve the circuit routing problem with their limitations . They also establish how the proposed approach excels where the previous approaches get stuck or give sub-optimal solutions . However , the authors do not present any information regarding the time complexity of their proposed approach . Along with that , the paper is also missing comparisons with the exact solutions proposed in past papers targeting this problem . Supplementary data and experiments can help alleviate these concerns . Updated : The authors added the requested timing complexity data and additional experiments with better baselines to compare the proposed RC algorithm against . They present valid issues with reproducing some of the previous work . While a theoretical proof establishing the worst-case time complexity of RC to be better than random sampling plus Seq A * would be ideal . The empirical data presented does support the claim that RC algorithm is useful for finding more optimal solutions for large maps faster than Seq A * plus random sampling . # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Pros : 1 . The authors present a detailed description of existing approaches to solve the circuit routing problem along with the key limitations of the approaches discussed . 2.Specifically , since the proposed approach does not require training data or human demonstration , it has a big advantage on other learning-based methods . Since , training data for routing problems is hard to generate ( time-consuming ) or find easily ( lack of open source benchmarks/data ) . 3.Section 4 presents a well written incremental description of the proposed routing approach starting from ranking learning to cost map learning to ranking cost . 4.The experiments presented in Section 5 , clearly demonstrate the superiority of the proposed approach over the baseline approaches considered in the paper . 5.Lastly , the ablation studies clarify the limitations of scaling the random sample bucket for rank learning . Figure 2 b ) does a particularly good job of illustrating the usage of Cost maps . Further , the authors demonstrate the scalability of their approach to larger applications . Which are missing in the cited learning-based previous approaches . # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Cons : 1 . The presented approaches rely heavily on the ability of OpenAI-ES algorithm to learn the cost maps and ranking order that will help achieve optimal routing . It would be useful if the authors could present an analysis of the limitations of this algorithm . Are there any cases when it fails to converge to the optimal solution ? Are there other alternative solvers that could replace this evolutionary strategy in such scenarios ? 2.Section 5 , the choice of baseline approaches while covering the fundamental types of routing approaches ( sequential , learning ( RL ) based , cost-map learning ) do not show performance compared to the related works cited in the paper . For instance , Liao et al . ( 2020 ) , He and Bao ( 2020 ) , or 2-stage routing algorithms . 3.While the authors correctly list the limitations of heuristic based ( 2-stage ) routing algorithms , they fail to credit their simplicity which can be critical when routing very large-scale designs like VLSI chips . Such a tradeoff of simplicity vs optimality of solution would require a comparison of the time complexity of the different approaches analyzed in this paper and how they scale with the complexity of the problem . 4.Albeit the heuristic based approaches might converge on sub-optimal solutions . However , if they are much faster than ranking cost , combining multiple trials of heuristics-based approaches with human expert interventions could give ranking cost a competition in finding the optimal routing faster . 5.Above suggested analysis of time complexity will help understand up to what number of random samples of ranking orders can be tried , while matching the time taken by ranking cost , for Sequential A * and VIN baselines . Thereby allowing for a fairer comparison in the results presented in Table 1 . # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Questions during rebuttal period : 1 . Kindly address the concerns regarding time complexity of the proposed and past routing approaches as described in the Cons section . # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Some typos : ( 1 ) Section 2.3 , \u201c Recently , Liao et al . ( 2020 ) trained * a deep Q-network \u201d . ( 2 ) Section 6 , \u201c Our method is a * one-stage \u201d .", "rating": "6: Marginally above acceptance threshold", "reply_text": "We sincerely thank you for your comprehensive comments on our paper and we carefully answer each of your questions as below . [ are there other alternative solvers that could replace this evolutionary strategy ? ] We think other black-box optimization methods , such as the REINFORCE algorithm , could also be used in our framework . But in the OpenAI-ES paper , authors reported that OpenAI-ES rivalled the performance of modern deep reinforcement learning methods on multiple control tasks . Thus , we choose OpenAI-ES as our optimization method . [ time complexity of our algorithm ] For learning-based algorithms , a common way to compare the time complexity is reporting the learning steps or wallclock time . We report the wallclock time of different algorithms in our new version . It is obvious that the Ranking Cost algorithm takes more running time , since it involves in a learning procedure when solving each task . But we argue that the time consumption is acceptable , since our algorithm only takes less than one minute to get the solution . It is worthy to sacrifice a little more time to earn better solutions . [ no comparison to Liao et al.2020 , He & Bao , 2020 ] It is impossible for us to implement the methods of Liao et al.2020 and He & Bao , 2020 , because their papers lack detailed method descriptions and fail to release related materials ( code and datasets ) . For example , He & Bao , 2020 labelled a private dataset and trained a supervised model , but they did not public their dataset and failed to describe the network structure . These papers lack key information and related materials , which prevents other researchers from re-implementing and following their work . Instead , we will public our circuit simulator , detailed source code and the full dataset , if accepted . [ some typos ] Thank you for helping us improve the paper . We have corrected these typos in the new version ."}, {"review_id": "uQnJqzkhrmj-1", "review_text": "# # # Summary Author considers the circuit routing problem , where each net contains two nodes . The exact circuit routing problem is NP-hard in general , and author proposed to an approximate method . It uses several parameters to control the solution returned by a greedy search , i.e.the order of the nets to be routed and the greedy route selected by each net . At last , evolution strategy is deployed to find the best parameter that results in the most optimal greedy solution . Author evaluated the method on multiple grid environments , and shows that the method performs better in terms of both accuracy and scalability compared to other similar methods that uses learning to find a good solution . # # # Strength : The paper is organized very clearly , and all the ideas are demonstrated with good explanations and examples . I found the idea to be very simple and interesting . The algorithm seems to be quite easy to be implemented . # # # Weakness : I am concerning on the novelty of the paper . The paper uses parameter to control the execution of a sequential A * algorithm , and the parameters are updated using neural strategies . It is not clear why a sequential A * algorithm is selected here . For example , under what conditions of the routing problem , the coupling of evaluation strategy and the execution of a sequential A * algorithm can return an optimal solution . On the significance part , I am not satisfied by experiments that author designs . * On the baselines : Currently author only selects baselines that utilizes learning . As the circuit routing is a well known problem , author should include some baselines using traditional methods to demonstrate the significance of deploying RC on the routing problems . * On the problem instances : Currently , author only considers the circuit routing in a grids with non-overlapping constraint . These problems can also be solved using traditional methods . Author can consider to evaluate RC on problems whose design constraint can not be handled using traditional methods , as promised by the introduction . This can tighten the argument and reasonably narrow audience 's focus on only the learning based algorithm . # # # Comments : * Have author tried to apply the idea of neural evolution on general combinatorial optimization problem , e.g.approximate a Max-SAT problems ? In particular , you can also learns a variable order and value order using the same formulation in RC . As many combinatorial problems can be reduced to Max-SAT , it potentially can increase the significance of the work . # # # Questions : * I found the problem is very similar to the disjoint vertex path problems . Is there any connection between the two problems ? * During training , whether the learned ranking can be decoupled with the learned cost map ? For example , can you still obtain a good routing plane using the same cost map while changing to a different order that is suggested by algorithm ? What is the cost map for the first net in Figure 1f ) ? Does it shows any interesting structure so that you can still obtain a good routing plan if we try to route the second net before the first one ?", "rating": "5: Marginally below acceptance threshold", "reply_text": "We sincerely thank you for your comprehensive comments on our paper and we carefully answer each of your questions as below . [ related to vertex-disjoint path problems ] Thank you for pointing out the related work . The circuit routing task is indeed a vertex-disjoint path problem . In the research community of the vertex-disjoint path problem , researchers have proved that it is an NP-complete problem , and they also add some constraints on the graph to reduce the difficulty when designing heuristic algorithms . However , our method is a learning-based method , and it can be used on general graphs . [ order of the cost maps ] 1 . On the one hand , the order parameter and the cost map parameter are trained jointly , so the order and cost map are conditioned on each other , which means they are not statistically independent . A cost map with the wrong order could impact the final performance . For example , if we have two pairs to be routed and the order is fixed as ( 1,2 ) , the first cost map will completely not be trained and only the second cost map will be trained according to Equation ( 10 ) . If the order is changed to ( 2,1 ) after training , then the trained cost map ( the second one ) will not be used , which may lead to a bad result . When the trained order and cost maps are coupled , you shall not change the order if you want to get the best result . 2.On the other hand , the cost maps also have the ability to generalize to different orders . For example , if we have two pairs to be routed and the orders are not fixed , then both of the orders , ( 1,2 ) and ( 2,1 ) will occur in the learning procedure . Thus , both the first and the second cost map will be well trained . When testing with the order ( 1,2 ) , only the second cost map will be used and vice versa . The generalization ability of cost maps over different orders makes the training of the order parameter possible , where the order will be ceaselessly changed during the learning procedure . [ extend to other combinatorial optimization problems ] In this work , we mainly focus on designing algorithms to solve the circuit routing problem . Indeed , our method has shown some insights for solving more general combinatorial optimization problems ( e.g. , we can also learn a variable order and values using the same formulation in RC for the Max-SAT problem ) , and we think it is worthy to be explored in the future work . [ the reviewer states this problem can be solved by traditional algorithms ] The circuit routing problem is an NP-complete problem , we do n't find there is a universal traditional algorithm that can solve this problem in acceptable time complexity . [ why a sequential A * algorithm is selected here ] The A * search algorithm is one of the most efficient shortest path algorithms . And the sequential A * is the most commonly used algorithm in circuit routing tasks . That is why we choose the A * algorithm as our low-level planner ."}, {"review_id": "uQnJqzkhrmj-2", "review_text": "The paper considers the problem of determining efficient routes for connecting pairs of source , destination points over a circuit board . Due to physical constraints no two routes may intersect , and the routes may not pass through obstacles if there are any . For efficient performance it is desirable that the paths are as short as possible ; as such the authors consider minimizing the sum length of all the paths as the objective . The paper proposes a ranking cost algorithm that combines A * search with an evolution optimization technique for learning efficient routes . Experimental evaluations show the proposed approach outperforming an RL based approach . Routing in circuit boards is an important problem for the vlsi community . Moreover , the problem has a combinatorial optimization flavor to it , which have been considered and is of broad interest to the iclr community as well . The main issue I have with the paper is the lack of sufficient motivation given for the proposed solution . E.g. , why A * search , why OpenAI-ES ? To me the proposed approach feels a bit \u201c non-standard \u201d , which leaves me wondering why the authors chose to go via this route . Could you have solved this via an RL formulation in one stage for example ? The other issue I have is regarding generalization . Can the parameters learned by the proposed algorithm be used for finding routes in unseen circuit board ( or nets ) configurations ? As far as I understand , both training and evaluation is done for a fixed board and nets configuration . If this is indeed the case , then how is the learning approach justified over well-known black-box optimization ( e.g. , simulated annealing , genetic algorithms etc . ) or fast approximation algorithms ( e.g. , integer programming with time cut-off etc . ) ? Minor : is the variance parameter $ \\sigma $ in AI-ES learned as well , or is only the mean learned ?", "rating": "5: Marginally below acceptance threshold", "reply_text": "We sincerely thank you for your comprehensive comments on our paper and we carefully answer each of your questions as below . [ why A * search , why OpenAI-ES ] 1 . The A * search algorithm is one of the efficient shortest path algorithms . And the sequential A * is the most commonly used algorithm in circuit routing tasks . That is why we choose the A * algorithm as our low-level planner . 2.To train the cost map parameters , we need a powerful black-box optimization method . Actually , OpenAI-ES is a black-box optimization method and rivals the performance of modern deep reinforcement learning methods on multiple control tasks ( for evaluative results , please check the OpenAI-ES paper ) . Thus , we choose OpenAI-ES as our optimization method . [ is the parameter $ \\sigma $ learned ? ] In the OpenAI-ES algorithm , this parameter is fixed and will not be learned . So we also treat it as a hyper-parameter in our work . [ compared with other black-box optimization methods ] Yes , we agree that it is ok to use different black-box optimization methods to optimize the parameters . And the OpenAI-ES has shown excellent performance on complex tasks and has better scalability with computing resources . Thus OpenAI-ES is more suitable for computation-dense tasks and this is the reason why we utilize the OpenAI-ES as the underlying black-box optimization method ."}, {"review_id": "uQnJqzkhrmj-3", "review_text": "1.Summary & contributions This paper develops an approach for solving a ( simplified ) circuit routing problem , which is to find non-intersecting paths between pairs of points ( so called nets ) in a grid . The paper uses a learning based approach based on OpenAI Evolution Strategies ( OpenAI-ES ) which learns 1 ) the order in which to route the different nets and 2 ) so called cost-maps for each net which provide additional guidance to the A * algorithm to account for later nets while routing earlier nets ( i.e.to 'avoid the greedy pitfall ' ) . 2.Strengths & weaknesses The paper is well written and generally easy to follow and uses a principled and elegant approach to solving an interesting problem . I especially like the 'natural ' way in which a learned policy integrates with A * search , and the resulting desirable properties . This makes the method a very principled approach . The major limitation of this work is that the proposed method is only compared in terms of solution quality , and not by computational cost . From the specified parameters ( up to 1000 training iterations with 40 parallel workers ) , the necessary compute seems orders of magnitude higher than the baselines , for example the 'random approach ' which takes the best of 5 tries . To substantiate the claim that the method `` outperforms baselines with higher connectivity rates and better scalability '' , I think at least baselines should be evaluated with the same computational budget , and ideally the trade-off between solution quality and computational cost should be explored . Also , I wonder , why is the method not compared to Liao et al.2020 , He & Bao , 2020 ? Another aspect which is relevant is that , if I understood correctly , the 'policy ' consist only of the ranking parameters and the cost maps , and is thus tied to a specific instance of the circuit routing problem which can not generalize to new instances , such that the training procedure should be run again for each new instance , adding to the high cost . 3.Recommendation My current assessment is that the paper is marginally below the acceptance threshold . 4.Arguments for recommendation The paper is of high quality , well written and well motivated , but the experiments lack a comparison of the algorithm and baselines with respect to computational cost , which is relevant to support the claim that this method outperforms baselines and has better scalability . 5.Questions to authors Could you add experimental results with respect to running time or number of iterations , for example extend table D to a number of samples ( 40K ? ) such that the running time is comparable with the proposed method ? 6.Additional feedback Minor comments/suggestions/compliments/questions : - The term 'score function J ( theta ) ' can be confusing since typically the score function refers to grad log p_theta . Maybe 'objective function ' could be an alternative ? - Why does A * use Euclidean distance as heuristic and not Manhattan distance which seems more sensible in a grid ? - I like the qualitative comparison which only compares length for problems solved by all solvers - What is the key that makes this approach more scalable compared to Liao et al.2020 , He & Bao , 2020 ?", "rating": "5: Marginally below acceptance threshold", "reply_text": "We sincerely thank you for your comprehensive comments on our paper and we carefully answer each of your questions as below . [ add time comparation ] We added the wallclock time of different algorithms in the experiment in the new version . It is obvious that the Ranking Cost algorithm takes more running time , since it involves a learning procedure when solving each task . But we argue that the time consumption is acceptable , since our algorithm only takes less than one minute to get the solution . It is worthy to sacrifice a little more time to earn better solutions . [ about the `` score function '' $ J ( \\theta ) $ ] We have taken the reviewer 's advice , and changed it to the `` objective function '' in the new version . [ why Euclidean distance not Manhattan distance ] It is optional to use Euclidean distance or Manhattan distance in our algorithm . Since they are just heuristic distance functions and neither of them can return the true distance , both methods can be chosen for the A * algorithm and they will not change the final result . [ What is the key that makes this approach more scalable compared to Liao et al.2020 , He & Bao , 2020 ] 1 . We think the key reason is that our method takes advantage of an efficient search-based method ( the A * algorithm ) and combines it with a learning-based method . Our method is built on top of the A * algorithm , and our learning part focuses on optimizing the parameter used by the A * algorithm . 2.However , Liao et al.2020 and He & Bao , 2020 try to design algorithms to produce actions at each time step . Formally , they treat this task as a sequential decision-making problem , thus the search space grows exponentially with the running length ( or the map size ) , which prevents their method from applying to larger maps . [ no comparison to Liao et al.2020 , He & Bao , 2020 ] It is impossible for us to implement the methods of Liao et al.2020 and He & Bao , 2020 , because their papers lack detailed method descriptions and fail to release related materials ( code and datasets ) . For example , He & Bao , 2020 labelled a private dataset and trained a supervised model , but they did not public their dataset and failed to describe the network structure . These papers lack key information and related materials , which prevents other researchers from re-implementing and following their work . Instead , we will public our circuit simulator , detailed source code and the full dataset , if accepted . [ ca n't generalize to unseen tasks ] Our algorithm should be trained on each task independently and ca n't generalize to unseen tasks . We also point out : 1 . Each circuit routing task is difficult enough , i.e. , it is an NP-complete problem , so it will be challenging to design a single model to solve all the tasks . 2.In reality , there are various sizes and shapes of circuit boards . It will be challenging to design a single model to take different kinds of boards as inputs . Designing a model with generalization ability will be explored in our future work ."}], "0": {"review_id": "uQnJqzkhrmj-0", "review_text": "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Summary : In this paper the authors attempt to solve the circuit routing problem through a novel approach of combining search-based routing techniques ( e.g.A * search ) and evolutionary strategies ( e.g.OpenAI-ES ) . The authors define new parameters e.g.cost maps and a ranking parameter which improve the efficiency and effectiveness of their circuit routing solution . As opposed to heuristics based ( 2-step ) routing solutions , the authors develop a solution which optimizes a single global cost function . This makes the solution easily scalable to new constraints and designs while avoiding sub-optimal solutions ( common problem for 2-stage routing ) . The authors show that their approach doesn \u2019 t require human demonstrations or training data of any kind thereby giving their solution an edge over learning-based techniques requiring training data . Lastly , through experiments the authors establish that their approach is scalable to larger applications . # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Reasons for score : The authors present an all-round discussion for the different approaches to solve the circuit routing problem with their limitations . They also establish how the proposed approach excels where the previous approaches get stuck or give sub-optimal solutions . However , the authors do not present any information regarding the time complexity of their proposed approach . Along with that , the paper is also missing comparisons with the exact solutions proposed in past papers targeting this problem . Supplementary data and experiments can help alleviate these concerns . Updated : The authors added the requested timing complexity data and additional experiments with better baselines to compare the proposed RC algorithm against . They present valid issues with reproducing some of the previous work . While a theoretical proof establishing the worst-case time complexity of RC to be better than random sampling plus Seq A * would be ideal . The empirical data presented does support the claim that RC algorithm is useful for finding more optimal solutions for large maps faster than Seq A * plus random sampling . # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Pros : 1 . The authors present a detailed description of existing approaches to solve the circuit routing problem along with the key limitations of the approaches discussed . 2.Specifically , since the proposed approach does not require training data or human demonstration , it has a big advantage on other learning-based methods . Since , training data for routing problems is hard to generate ( time-consuming ) or find easily ( lack of open source benchmarks/data ) . 3.Section 4 presents a well written incremental description of the proposed routing approach starting from ranking learning to cost map learning to ranking cost . 4.The experiments presented in Section 5 , clearly demonstrate the superiority of the proposed approach over the baseline approaches considered in the paper . 5.Lastly , the ablation studies clarify the limitations of scaling the random sample bucket for rank learning . Figure 2 b ) does a particularly good job of illustrating the usage of Cost maps . Further , the authors demonstrate the scalability of their approach to larger applications . Which are missing in the cited learning-based previous approaches . # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Cons : 1 . The presented approaches rely heavily on the ability of OpenAI-ES algorithm to learn the cost maps and ranking order that will help achieve optimal routing . It would be useful if the authors could present an analysis of the limitations of this algorithm . Are there any cases when it fails to converge to the optimal solution ? Are there other alternative solvers that could replace this evolutionary strategy in such scenarios ? 2.Section 5 , the choice of baseline approaches while covering the fundamental types of routing approaches ( sequential , learning ( RL ) based , cost-map learning ) do not show performance compared to the related works cited in the paper . For instance , Liao et al . ( 2020 ) , He and Bao ( 2020 ) , or 2-stage routing algorithms . 3.While the authors correctly list the limitations of heuristic based ( 2-stage ) routing algorithms , they fail to credit their simplicity which can be critical when routing very large-scale designs like VLSI chips . Such a tradeoff of simplicity vs optimality of solution would require a comparison of the time complexity of the different approaches analyzed in this paper and how they scale with the complexity of the problem . 4.Albeit the heuristic based approaches might converge on sub-optimal solutions . However , if they are much faster than ranking cost , combining multiple trials of heuristics-based approaches with human expert interventions could give ranking cost a competition in finding the optimal routing faster . 5.Above suggested analysis of time complexity will help understand up to what number of random samples of ranking orders can be tried , while matching the time taken by ranking cost , for Sequential A * and VIN baselines . Thereby allowing for a fairer comparison in the results presented in Table 1 . # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Questions during rebuttal period : 1 . Kindly address the concerns regarding time complexity of the proposed and past routing approaches as described in the Cons section . # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Some typos : ( 1 ) Section 2.3 , \u201c Recently , Liao et al . ( 2020 ) trained * a deep Q-network \u201d . ( 2 ) Section 6 , \u201c Our method is a * one-stage \u201d .", "rating": "6: Marginally above acceptance threshold", "reply_text": "We sincerely thank you for your comprehensive comments on our paper and we carefully answer each of your questions as below . [ are there other alternative solvers that could replace this evolutionary strategy ? ] We think other black-box optimization methods , such as the REINFORCE algorithm , could also be used in our framework . But in the OpenAI-ES paper , authors reported that OpenAI-ES rivalled the performance of modern deep reinforcement learning methods on multiple control tasks . Thus , we choose OpenAI-ES as our optimization method . [ time complexity of our algorithm ] For learning-based algorithms , a common way to compare the time complexity is reporting the learning steps or wallclock time . We report the wallclock time of different algorithms in our new version . It is obvious that the Ranking Cost algorithm takes more running time , since it involves in a learning procedure when solving each task . But we argue that the time consumption is acceptable , since our algorithm only takes less than one minute to get the solution . It is worthy to sacrifice a little more time to earn better solutions . [ no comparison to Liao et al.2020 , He & Bao , 2020 ] It is impossible for us to implement the methods of Liao et al.2020 and He & Bao , 2020 , because their papers lack detailed method descriptions and fail to release related materials ( code and datasets ) . For example , He & Bao , 2020 labelled a private dataset and trained a supervised model , but they did not public their dataset and failed to describe the network structure . These papers lack key information and related materials , which prevents other researchers from re-implementing and following their work . Instead , we will public our circuit simulator , detailed source code and the full dataset , if accepted . [ some typos ] Thank you for helping us improve the paper . We have corrected these typos in the new version ."}, "1": {"review_id": "uQnJqzkhrmj-1", "review_text": "# # # Summary Author considers the circuit routing problem , where each net contains two nodes . The exact circuit routing problem is NP-hard in general , and author proposed to an approximate method . It uses several parameters to control the solution returned by a greedy search , i.e.the order of the nets to be routed and the greedy route selected by each net . At last , evolution strategy is deployed to find the best parameter that results in the most optimal greedy solution . Author evaluated the method on multiple grid environments , and shows that the method performs better in terms of both accuracy and scalability compared to other similar methods that uses learning to find a good solution . # # # Strength : The paper is organized very clearly , and all the ideas are demonstrated with good explanations and examples . I found the idea to be very simple and interesting . The algorithm seems to be quite easy to be implemented . # # # Weakness : I am concerning on the novelty of the paper . The paper uses parameter to control the execution of a sequential A * algorithm , and the parameters are updated using neural strategies . It is not clear why a sequential A * algorithm is selected here . For example , under what conditions of the routing problem , the coupling of evaluation strategy and the execution of a sequential A * algorithm can return an optimal solution . On the significance part , I am not satisfied by experiments that author designs . * On the baselines : Currently author only selects baselines that utilizes learning . As the circuit routing is a well known problem , author should include some baselines using traditional methods to demonstrate the significance of deploying RC on the routing problems . * On the problem instances : Currently , author only considers the circuit routing in a grids with non-overlapping constraint . These problems can also be solved using traditional methods . Author can consider to evaluate RC on problems whose design constraint can not be handled using traditional methods , as promised by the introduction . This can tighten the argument and reasonably narrow audience 's focus on only the learning based algorithm . # # # Comments : * Have author tried to apply the idea of neural evolution on general combinatorial optimization problem , e.g.approximate a Max-SAT problems ? In particular , you can also learns a variable order and value order using the same formulation in RC . As many combinatorial problems can be reduced to Max-SAT , it potentially can increase the significance of the work . # # # Questions : * I found the problem is very similar to the disjoint vertex path problems . Is there any connection between the two problems ? * During training , whether the learned ranking can be decoupled with the learned cost map ? For example , can you still obtain a good routing plane using the same cost map while changing to a different order that is suggested by algorithm ? What is the cost map for the first net in Figure 1f ) ? Does it shows any interesting structure so that you can still obtain a good routing plan if we try to route the second net before the first one ?", "rating": "5: Marginally below acceptance threshold", "reply_text": "We sincerely thank you for your comprehensive comments on our paper and we carefully answer each of your questions as below . [ related to vertex-disjoint path problems ] Thank you for pointing out the related work . The circuit routing task is indeed a vertex-disjoint path problem . In the research community of the vertex-disjoint path problem , researchers have proved that it is an NP-complete problem , and they also add some constraints on the graph to reduce the difficulty when designing heuristic algorithms . However , our method is a learning-based method , and it can be used on general graphs . [ order of the cost maps ] 1 . On the one hand , the order parameter and the cost map parameter are trained jointly , so the order and cost map are conditioned on each other , which means they are not statistically independent . A cost map with the wrong order could impact the final performance . For example , if we have two pairs to be routed and the order is fixed as ( 1,2 ) , the first cost map will completely not be trained and only the second cost map will be trained according to Equation ( 10 ) . If the order is changed to ( 2,1 ) after training , then the trained cost map ( the second one ) will not be used , which may lead to a bad result . When the trained order and cost maps are coupled , you shall not change the order if you want to get the best result . 2.On the other hand , the cost maps also have the ability to generalize to different orders . For example , if we have two pairs to be routed and the orders are not fixed , then both of the orders , ( 1,2 ) and ( 2,1 ) will occur in the learning procedure . Thus , both the first and the second cost map will be well trained . When testing with the order ( 1,2 ) , only the second cost map will be used and vice versa . The generalization ability of cost maps over different orders makes the training of the order parameter possible , where the order will be ceaselessly changed during the learning procedure . [ extend to other combinatorial optimization problems ] In this work , we mainly focus on designing algorithms to solve the circuit routing problem . Indeed , our method has shown some insights for solving more general combinatorial optimization problems ( e.g. , we can also learn a variable order and values using the same formulation in RC for the Max-SAT problem ) , and we think it is worthy to be explored in the future work . [ the reviewer states this problem can be solved by traditional algorithms ] The circuit routing problem is an NP-complete problem , we do n't find there is a universal traditional algorithm that can solve this problem in acceptable time complexity . [ why a sequential A * algorithm is selected here ] The A * search algorithm is one of the most efficient shortest path algorithms . And the sequential A * is the most commonly used algorithm in circuit routing tasks . That is why we choose the A * algorithm as our low-level planner ."}, "2": {"review_id": "uQnJqzkhrmj-2", "review_text": "The paper considers the problem of determining efficient routes for connecting pairs of source , destination points over a circuit board . Due to physical constraints no two routes may intersect , and the routes may not pass through obstacles if there are any . For efficient performance it is desirable that the paths are as short as possible ; as such the authors consider minimizing the sum length of all the paths as the objective . The paper proposes a ranking cost algorithm that combines A * search with an evolution optimization technique for learning efficient routes . Experimental evaluations show the proposed approach outperforming an RL based approach . Routing in circuit boards is an important problem for the vlsi community . Moreover , the problem has a combinatorial optimization flavor to it , which have been considered and is of broad interest to the iclr community as well . The main issue I have with the paper is the lack of sufficient motivation given for the proposed solution . E.g. , why A * search , why OpenAI-ES ? To me the proposed approach feels a bit \u201c non-standard \u201d , which leaves me wondering why the authors chose to go via this route . Could you have solved this via an RL formulation in one stage for example ? The other issue I have is regarding generalization . Can the parameters learned by the proposed algorithm be used for finding routes in unseen circuit board ( or nets ) configurations ? As far as I understand , both training and evaluation is done for a fixed board and nets configuration . If this is indeed the case , then how is the learning approach justified over well-known black-box optimization ( e.g. , simulated annealing , genetic algorithms etc . ) or fast approximation algorithms ( e.g. , integer programming with time cut-off etc . ) ? Minor : is the variance parameter $ \\sigma $ in AI-ES learned as well , or is only the mean learned ?", "rating": "5: Marginally below acceptance threshold", "reply_text": "We sincerely thank you for your comprehensive comments on our paper and we carefully answer each of your questions as below . [ why A * search , why OpenAI-ES ] 1 . The A * search algorithm is one of the efficient shortest path algorithms . And the sequential A * is the most commonly used algorithm in circuit routing tasks . That is why we choose the A * algorithm as our low-level planner . 2.To train the cost map parameters , we need a powerful black-box optimization method . Actually , OpenAI-ES is a black-box optimization method and rivals the performance of modern deep reinforcement learning methods on multiple control tasks ( for evaluative results , please check the OpenAI-ES paper ) . Thus , we choose OpenAI-ES as our optimization method . [ is the parameter $ \\sigma $ learned ? ] In the OpenAI-ES algorithm , this parameter is fixed and will not be learned . So we also treat it as a hyper-parameter in our work . [ compared with other black-box optimization methods ] Yes , we agree that it is ok to use different black-box optimization methods to optimize the parameters . And the OpenAI-ES has shown excellent performance on complex tasks and has better scalability with computing resources . Thus OpenAI-ES is more suitable for computation-dense tasks and this is the reason why we utilize the OpenAI-ES as the underlying black-box optimization method ."}, "3": {"review_id": "uQnJqzkhrmj-3", "review_text": "1.Summary & contributions This paper develops an approach for solving a ( simplified ) circuit routing problem , which is to find non-intersecting paths between pairs of points ( so called nets ) in a grid . The paper uses a learning based approach based on OpenAI Evolution Strategies ( OpenAI-ES ) which learns 1 ) the order in which to route the different nets and 2 ) so called cost-maps for each net which provide additional guidance to the A * algorithm to account for later nets while routing earlier nets ( i.e.to 'avoid the greedy pitfall ' ) . 2.Strengths & weaknesses The paper is well written and generally easy to follow and uses a principled and elegant approach to solving an interesting problem . I especially like the 'natural ' way in which a learned policy integrates with A * search , and the resulting desirable properties . This makes the method a very principled approach . The major limitation of this work is that the proposed method is only compared in terms of solution quality , and not by computational cost . From the specified parameters ( up to 1000 training iterations with 40 parallel workers ) , the necessary compute seems orders of magnitude higher than the baselines , for example the 'random approach ' which takes the best of 5 tries . To substantiate the claim that the method `` outperforms baselines with higher connectivity rates and better scalability '' , I think at least baselines should be evaluated with the same computational budget , and ideally the trade-off between solution quality and computational cost should be explored . Also , I wonder , why is the method not compared to Liao et al.2020 , He & Bao , 2020 ? Another aspect which is relevant is that , if I understood correctly , the 'policy ' consist only of the ranking parameters and the cost maps , and is thus tied to a specific instance of the circuit routing problem which can not generalize to new instances , such that the training procedure should be run again for each new instance , adding to the high cost . 3.Recommendation My current assessment is that the paper is marginally below the acceptance threshold . 4.Arguments for recommendation The paper is of high quality , well written and well motivated , but the experiments lack a comparison of the algorithm and baselines with respect to computational cost , which is relevant to support the claim that this method outperforms baselines and has better scalability . 5.Questions to authors Could you add experimental results with respect to running time or number of iterations , for example extend table D to a number of samples ( 40K ? ) such that the running time is comparable with the proposed method ? 6.Additional feedback Minor comments/suggestions/compliments/questions : - The term 'score function J ( theta ) ' can be confusing since typically the score function refers to grad log p_theta . Maybe 'objective function ' could be an alternative ? - Why does A * use Euclidean distance as heuristic and not Manhattan distance which seems more sensible in a grid ? - I like the qualitative comparison which only compares length for problems solved by all solvers - What is the key that makes this approach more scalable compared to Liao et al.2020 , He & Bao , 2020 ?", "rating": "5: Marginally below acceptance threshold", "reply_text": "We sincerely thank you for your comprehensive comments on our paper and we carefully answer each of your questions as below . [ add time comparation ] We added the wallclock time of different algorithms in the experiment in the new version . It is obvious that the Ranking Cost algorithm takes more running time , since it involves a learning procedure when solving each task . But we argue that the time consumption is acceptable , since our algorithm only takes less than one minute to get the solution . It is worthy to sacrifice a little more time to earn better solutions . [ about the `` score function '' $ J ( \\theta ) $ ] We have taken the reviewer 's advice , and changed it to the `` objective function '' in the new version . [ why Euclidean distance not Manhattan distance ] It is optional to use Euclidean distance or Manhattan distance in our algorithm . Since they are just heuristic distance functions and neither of them can return the true distance , both methods can be chosen for the A * algorithm and they will not change the final result . [ What is the key that makes this approach more scalable compared to Liao et al.2020 , He & Bao , 2020 ] 1 . We think the key reason is that our method takes advantage of an efficient search-based method ( the A * algorithm ) and combines it with a learning-based method . Our method is built on top of the A * algorithm , and our learning part focuses on optimizing the parameter used by the A * algorithm . 2.However , Liao et al.2020 and He & Bao , 2020 try to design algorithms to produce actions at each time step . Formally , they treat this task as a sequential decision-making problem , thus the search space grows exponentially with the running length ( or the map size ) , which prevents their method from applying to larger maps . [ no comparison to Liao et al.2020 , He & Bao , 2020 ] It is impossible for us to implement the methods of Liao et al.2020 and He & Bao , 2020 , because their papers lack detailed method descriptions and fail to release related materials ( code and datasets ) . For example , He & Bao , 2020 labelled a private dataset and trained a supervised model , but they did not public their dataset and failed to describe the network structure . These papers lack key information and related materials , which prevents other researchers from re-implementing and following their work . Instead , we will public our circuit simulator , detailed source code and the full dataset , if accepted . [ ca n't generalize to unseen tasks ] Our algorithm should be trained on each task independently and ca n't generalize to unseen tasks . We also point out : 1 . Each circuit routing task is difficult enough , i.e. , it is an NP-complete problem , so it will be challenging to design a single model to solve all the tasks . 2.In reality , there are various sizes and shapes of circuit boards . It will be challenging to design a single model to take different kinds of boards as inputs . Designing a model with generalization ability will be explored in our future work ."}}