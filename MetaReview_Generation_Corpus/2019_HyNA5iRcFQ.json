{"year": "2019", "forum": "HyNA5iRcFQ", "title": "Detecting Egregious Responses in Neural Sequence-to-sequence Models", "decision": "Accept (Poster)", "meta_review": "This work examines how to craft adversarial examples that will lead trained seq2seq models to generate undesired outputs (here defined as, assigning higher-than-average probability to undesired outputs). Making a model safe for deployment is an important unsolved problem and this work is looking at it from an interesting angle, and all reviewers agree that the paper is clear, well-presented, and offering useful observations. While the paper does not provide ways to fix the problem of egregious outputs being probable, as pointed out by reviewers, it is still a valuable study of the behavior of trained models and an interesting way to \"probe\" them, that would likely be of high interest to many people at ICLR.", "reviews": [{"review_id": "HyNA5iRcFQ-0", "review_text": "This paper explores the task of finding discrete adversarial examples for (current) dialog models in a post hoc manner (i.e., once models are trained). In particular, the authors propose an optimization procedure for crafting inputs (utterances) that trigger trained dialog models to respond in an egregious manner. This line of research is interesting as it relates to real-world problems that our models face before they can be safely deployed. The paper is easy to read, nicely written, and the proposed optimization method seems reasonable. The study also seems clear and the results are fairly robust across three datasets. It was also interesting to study datasets which, a priori, seem like they would not contain much egregious content (e.g., Ubuntu \"help desk\" conversations). My main question is that after reading the paper, I'm not sure that one has an answer to the question that the authors set out to answer. In particular, are our current seq2seq models for dialogs prone to generating egregious responses? On one hand, it seems like models can assign higher-than-average probability to egregious responses. On the other, it is unclear what this means. For example, it seems like the possibility that such a model outputs such an answer in a conversation might still be very small. Quantifying this would be worthwhile. Further, one would imagine that a complete dialog system pipeline would contain a collection of different models including a seq2seq model but also others. In that context, is it clear that it's the role of the seq2seq model to limit egregious responses? A related aspect is that it would have been interesting to explore a bit more the reasons that cause the generation of such egregious responses. It is unclear how representative is the example that is detailed (\"I will kill you\" in Section 5.3). Are other examples using words in other contexts? Also, it seems reasonable that if one wants to avoid such answers, countermeasures (e.g., in designing the loss or in adding common sense knowledge) have to be considered. Other comments: - I am not sure of the value of Section 3. In particular, it seems like the presentation of the paper would be as effective if this section was summarized in a short paragraph (and perhaps detailed in an appendix). - Section 3.1, \"continuous relaxation of the input embedding\", what does that mean since the embedding already lives in continuous space? - I understand that your study only considers (when optimizing for egregious responses)) dialogs that are 1-turn long. I wonder if you could increase hit rates by crafting multiple inputs at once. - In Section 4.3, you fix G (size of the word search space) to 100. Have you tried different values? Do you know if larger Gs could have an impact of reported hit metrics? - In Table 3, results from the first column (normal, o-greedy) seem interesting. Wouldn't one expect that the model can actually generate (almost) all normal responses? Your results indicate that for Ubuntu models can only generate between 65% and 82% of actual (test) responses. Do you know what in the Ubuntu corpus leads to such a result? - In Section 5.3, you seem to say that the lack of diversity of greedy-decoded sentences is related to the low performance of the \"o-greedy\" metric. Could this result simply be explained because the model is unlikely to generate sentences that it has never seen before? You could try changing the temperature of the decoding distribution, that should improve diversity and you could then check whether or not that also increases the hit rate of the o-greedy metric. - Perhaps tailoring the mal lists to each specific dataset would make sense (I understand that there is already some differences in between the mal lists of the different datasets but perhaps building the lists with a particular dataset in mind would yield \"better\" results). ", "rating": "7: Good paper, accept", "reply_text": "Thanks for the detailed review , here \u2019 s responses to the advice and questions : 1 ) My main question is that after reading the paper , I 'm not sure that one has an answer to the question that the authors set out to answer . In particular , are our current seq2seq models for dialogs prone to generating egregious responses ? On one hand , it seems like models can assign higher-than-average probability to egregious responses . On the other , it is unclear what this means . For example , it seems like the possibility that such a model outputs such an answer in a conversation might still be very small . Quantifying this would be worthwhile . One clear observation that can be made from the experiments regarding greedy decoding is that the model is very robust against egregious outputs , at least those used in the experiments . Unless one is using data-sets like Opensubtitles . With regards to sampling , the reviewer is correct , but , since we are dealing with large vocabulary seq2seq models , the actual probability assigned to any sequence will be very small . We believe that a very natural and desirable quality of the model is that \u201c the probability assigned to a bad sentence should not be larger than the probability of a good ( reference ) sentence. \u201d Unfortunately , our experiments clearly show that this is not the case , which is alarming . 2 ) Further , one would imagine that a complete dialog system pipeline would contain a collection of different models including a seq2seq model but also others . In that context , is it clear that it 's the role of the seq2seq model to limit egregious responses ? This is a good question but we believe that it is slightly out of the scope of this paper because we are examining End-to-End seq2seq models ( in part because they have gained increasing popularity in recent years ) . The reviewer is correct that one can have additional modules in the pipeline to prevent bad responses from by the system , but we also believe that , ideally , the seq2seq models should be robust against egregious behavior by themselves . 3 ) A related aspect is that it would have been interesting to explore a bit more the reasons that cause the generation of such egregious responses . It is unclear how representative is the example that is detailed ( `` I will kill you '' in Section 5.3 ) . Are other examples using words in other contexts ? Also , it seems reasonable that if one wants to avoid such answers , countermeasures ( e.g. , in designing the loss or in adding common sense knowledge ) have to be considered . To the first question , \u201c I will kill you \u201d is just one example , and we can do this for many alternatives . The key is that we believe the model is doing a good job of generalizing , but it does not know that some sentences are not proper to generate . For example , people talk about \u201c hating something \u201d , and \u201c you \u201d is a noun , so the model could generalize to \u201c I hate you \u201d . People also talk about \u201c passwords \u201d , but the model doesn \u2019 t know one should not ask \u201c What \u2019 s your password ? \u201d As to the second question , we believe the reviewer is suggesting future work , and we agree that these are exciting directions to pursue in the future . 4 ) I am not sure of the value of Section 3 . In particular , it seems like the presentation of the paper would be as effective if this section was summarized in a short paragraph ( and perhaps detailed in an appendix ) . Section 3.1 , `` continuous relaxation of the input embedding '' , what does that mean since the embedding already lives in continuous space ? To the first question , we agree with the suggestion that Section 3 can be shortened . The reason we put emphasis on the continuous relaxation experiment is that we believe this is the first approach researchers will try in order to find trigger inputs for some target sequence . We thought that pointing out that this doesn \u2019 t work served as a useful motivation to turn to a enumeration based algorithm , such as gibbs-enum . For the second ( clarifying ) question , it \u2019 s true that the embedding lives in continuous space , but they are constrained to be one of the columns in the embedding matrix E^ { enc } in the trained model . By \u201c continuous relaxation of the input embedding \u201d we mean that we remove the column constraint , and allow the vector to be any continuous vector . We \u2019 ll add the explanation to the paper . 5 ) I understand that your study only considers ( when optimizing for egregious responses ) ) dialogs that are 1-turn long . I wonder if you could increase hit rates by crafting multiple inputs at once . One of the points of our work is that even if you just manipulate a 1-turn history , it is enough to trigger egregious outputs . Examining multi-turn histories will be a good subject for future work . For us , it will involve re-implementing code and re-running experiments . Our current expectation is that when you manipulate multi-turn history , that the hit rates will increase , but not significantly ."}, {"review_id": "HyNA5iRcFQ-1", "review_text": "Main contribution: devising and evaluating an algorithm to find inputs that trigger arbitrary \"egregious\" outputs (\"I will kill you\") in vanilla sequence-to-sequence models, as a white-box attack on NLG models. Clarity: The paper is overall clear. I found some of the appendices (esp. B and C) to be important for understanding the paper and believe these should be in the main paper. Moving parts of Appendix A in the main text would also add to the clarity. Originality: The work looks original. It is an extension of previous attacks on seq2seq models, such as the targeted-keyword-attack from (Cheng et al., 2018) in which the model is made to produce a keyword chosen by the attacker. Significance of contribution: The lack of control over the outputs of seq2seq is a major roadblock towards their broader adoption. The authors propose two algorithms for trying to find inputs creating given outputs, a simple one relying on continuous optimization this is shown not to work (breaking when projecting back into words), and another based relying on discrete optimization. The authors found that the task is hard when using greedy decoding, but often doable using sampled decoding (note that in this case, the model will generate a different output every time). My take-aways are that the task is hard and the results highlight that vanilla seq2seq models are pretty hard to manipulate; however it is interesting to see that with sampling, models may sometimes be tricked into producing really bad outputs. This white-box attack applicable to any chatbot. As the authors noted, an egregious output for one application (\"go to hell\" for customer service) may not be egregious for another one (\"go to hell\" in MT). Overall, the authors ask an interesting question: how easy is it to craft an input for a seq2seq model that will make it produce a \"very bad\" output. The work is novel, several algorithms are introduced to try to solve the problem and a comprehensive analysis of the results is presented. The attack is still of limited practicality, but this paper feels like a nice step towards more natural adversarial attacks in NLG. One last thing: the title seems a bit misleading, the work is not about \"detecting\" egregious outputs.", "rating": "7: Good paper, accept", "reply_text": "Thanks for the detailed review , here \u2019 s responses to the advice and questions : 1 ) I found some of the appendices ( esp.B and C ) to be important for understanding the paper and believe these should be in the main paper . Moving parts of Appendix A in the main text would also add to the clarity . Thanks for reading the appendices ! We agree that it would be our preference to move them into the main body of the paper , but we were constrained by the 10 page limit . 2 ) The lack of control over the outputs of seq2seq is a major roadblock towards their broader adoption . The authors propose two algorithms for trying to find inputs creating given outputs , a simple one relying on continuous optimization this is shown not to work ( breaking when projecting back into words ) , and another based relying on discrete optimization . The authors found that the task is hard when using greedy decoding , but often doable using sampled decoding ( note that in this case , the model will generate a different output every time ) . My take-aways are that the task is hard and the results highlight that vanilla seq2seq models are pretty hard to manipulate ; however it is interesting to see that with sampling , models may sometimes be tricked into producing really bad outputs . This white-box attack applicable to any chatbot . As the authors noted , an egregious output for one application ( `` go to hell '' for customer service ) may not be egregious for another one ( `` go to hell '' in MT ) . Overall , the authors ask an interesting question : how easy is it to craft an input for a seq2seq model that will make it produce a `` very bad '' output . The work is novel , several algorithms are introduced to try to solve the problem and a comprehensive analysis of the results is presented . The attack is still of limited practicality , but this paper feels like a nice step towards more natural adversarial attacks in NLG . Your understanding about the conclusions and limitations of the this work is correct . These are the main ideas we try to convey in the paper . 3 ) One last thing : the title seems a bit misleading , the work is not about `` detecting '' egregious outputs . It is true , that we are looking for trigger inputs that would cause the model to output egregious targets in a given list . Thus we agree that \u201c detecting \u201d could be a bit misleading\u2026 . But we don \u2019 t have better word choice for now . Any suggestions are welcome ! Thanks for the review !"}, {"review_id": "HyNA5iRcFQ-2", "review_text": "# Positive aspects of this submission - This submission explores a very interesting problem that is often overlooked in sequence-to-sequence models research. - The methodology in Sections 4 and 5 is very thorough and useful. - Good comparison of last-h with attention representations, which gives good insight about the robustness of each architecture against adversarial attacks. # Criticism - In Section 3, even if the \"l1 + projection\" experiments seem to show that generating egregious outputs with greedy decoding is very unlikely, it doesn't definitely prove so. It could be that your discrete optimization algorithm is suboptimal, especially given that other works on adversarial attacks for seq2seq models use different methods such as gradient regularization (Cheng et al. 2018). Similarly, the brute-force results on a simplified task in Appendix B are useful, but it's hard to tell whether the conclusions of this experiment can be extrapolated to the original dialog task. Given that you also study \"o-greedy-hit\" in more detail with a different algorithm in Sections 4 and 5, I would consider removing Section 3 or moving it to the Appendix for consistency.", "rating": "8: Top 50% of accepted papers, clear accept", "reply_text": "Thanks for the detailed review , here \u2019 s responses to the questions : 1 ) In Section 3 , even if the `` l1 + projection '' experiments seem to show that generating egregious outputs with greedy decoding is very unlikely , it does n't definitely prove so . It could be that your discrete optimization algorithm is suboptimal , especially given that other works on adversarial attacks for seq2seq models use different methods such as gradient regularization ( Cheng et al.2018 ) .Similarly , the brute-force results on a simplified task in Appendix B are useful , but it 's hard to tell whether the conclusions of this experiment can be extrapolated to the original dialog task . We agree that our approach is not a proof for the robustness for greedy decoding , but in this work we provide several empirical experiments from different angles ( the main result , continuous relaxation and brute-force enumeration ) to support that claim . And you \u2019 re right in that our algorithm is not perfect ( since the hit rate for the normal list is not 100 % , there is room for improvement in the search algorithm ) . We are aware that the algorithm in ( Cheng et al.2018 ) , in also applicable in our setting . However , the main contribution of our work is not about determining which algorithm is the best . We proposed a simple and effective gibbs-enum algorithm , and more importantly used it to demonstrate that the \u201c egregious output \u201d problem exists in standard seq2seq model training . 2 ) Given that you also study `` o-greedy-hit '' in more detail with a different algorithm in Sections 4 and 5 , I would consider removing Section 3 or moving it to the Appendix for consistency . The reason we put emphasis on the continuous relaxation experiment in Section 3 is that we believe this is the first natural approach researchers will try in order to find trigger inputs for some target sequence . We felt that by demonstrating that this doesn \u2019 t work , motivated the enumeration based algorithm , such as gibbs-enum . Thanks for the review !"}], "0": {"review_id": "HyNA5iRcFQ-0", "review_text": "This paper explores the task of finding discrete adversarial examples for (current) dialog models in a post hoc manner (i.e., once models are trained). In particular, the authors propose an optimization procedure for crafting inputs (utterances) that trigger trained dialog models to respond in an egregious manner. This line of research is interesting as it relates to real-world problems that our models face before they can be safely deployed. The paper is easy to read, nicely written, and the proposed optimization method seems reasonable. The study also seems clear and the results are fairly robust across three datasets. It was also interesting to study datasets which, a priori, seem like they would not contain much egregious content (e.g., Ubuntu \"help desk\" conversations). My main question is that after reading the paper, I'm not sure that one has an answer to the question that the authors set out to answer. In particular, are our current seq2seq models for dialogs prone to generating egregious responses? On one hand, it seems like models can assign higher-than-average probability to egregious responses. On the other, it is unclear what this means. For example, it seems like the possibility that such a model outputs such an answer in a conversation might still be very small. Quantifying this would be worthwhile. Further, one would imagine that a complete dialog system pipeline would contain a collection of different models including a seq2seq model but also others. In that context, is it clear that it's the role of the seq2seq model to limit egregious responses? A related aspect is that it would have been interesting to explore a bit more the reasons that cause the generation of such egregious responses. It is unclear how representative is the example that is detailed (\"I will kill you\" in Section 5.3). Are other examples using words in other contexts? Also, it seems reasonable that if one wants to avoid such answers, countermeasures (e.g., in designing the loss or in adding common sense knowledge) have to be considered. Other comments: - I am not sure of the value of Section 3. In particular, it seems like the presentation of the paper would be as effective if this section was summarized in a short paragraph (and perhaps detailed in an appendix). - Section 3.1, \"continuous relaxation of the input embedding\", what does that mean since the embedding already lives in continuous space? - I understand that your study only considers (when optimizing for egregious responses)) dialogs that are 1-turn long. I wonder if you could increase hit rates by crafting multiple inputs at once. - In Section 4.3, you fix G (size of the word search space) to 100. Have you tried different values? Do you know if larger Gs could have an impact of reported hit metrics? - In Table 3, results from the first column (normal, o-greedy) seem interesting. Wouldn't one expect that the model can actually generate (almost) all normal responses? Your results indicate that for Ubuntu models can only generate between 65% and 82% of actual (test) responses. Do you know what in the Ubuntu corpus leads to such a result? - In Section 5.3, you seem to say that the lack of diversity of greedy-decoded sentences is related to the low performance of the \"o-greedy\" metric. Could this result simply be explained because the model is unlikely to generate sentences that it has never seen before? You could try changing the temperature of the decoding distribution, that should improve diversity and you could then check whether or not that also increases the hit rate of the o-greedy metric. - Perhaps tailoring the mal lists to each specific dataset would make sense (I understand that there is already some differences in between the mal lists of the different datasets but perhaps building the lists with a particular dataset in mind would yield \"better\" results). ", "rating": "7: Good paper, accept", "reply_text": "Thanks for the detailed review , here \u2019 s responses to the advice and questions : 1 ) My main question is that after reading the paper , I 'm not sure that one has an answer to the question that the authors set out to answer . In particular , are our current seq2seq models for dialogs prone to generating egregious responses ? On one hand , it seems like models can assign higher-than-average probability to egregious responses . On the other , it is unclear what this means . For example , it seems like the possibility that such a model outputs such an answer in a conversation might still be very small . Quantifying this would be worthwhile . One clear observation that can be made from the experiments regarding greedy decoding is that the model is very robust against egregious outputs , at least those used in the experiments . Unless one is using data-sets like Opensubtitles . With regards to sampling , the reviewer is correct , but , since we are dealing with large vocabulary seq2seq models , the actual probability assigned to any sequence will be very small . We believe that a very natural and desirable quality of the model is that \u201c the probability assigned to a bad sentence should not be larger than the probability of a good ( reference ) sentence. \u201d Unfortunately , our experiments clearly show that this is not the case , which is alarming . 2 ) Further , one would imagine that a complete dialog system pipeline would contain a collection of different models including a seq2seq model but also others . In that context , is it clear that it 's the role of the seq2seq model to limit egregious responses ? This is a good question but we believe that it is slightly out of the scope of this paper because we are examining End-to-End seq2seq models ( in part because they have gained increasing popularity in recent years ) . The reviewer is correct that one can have additional modules in the pipeline to prevent bad responses from by the system , but we also believe that , ideally , the seq2seq models should be robust against egregious behavior by themselves . 3 ) A related aspect is that it would have been interesting to explore a bit more the reasons that cause the generation of such egregious responses . It is unclear how representative is the example that is detailed ( `` I will kill you '' in Section 5.3 ) . Are other examples using words in other contexts ? Also , it seems reasonable that if one wants to avoid such answers , countermeasures ( e.g. , in designing the loss or in adding common sense knowledge ) have to be considered . To the first question , \u201c I will kill you \u201d is just one example , and we can do this for many alternatives . The key is that we believe the model is doing a good job of generalizing , but it does not know that some sentences are not proper to generate . For example , people talk about \u201c hating something \u201d , and \u201c you \u201d is a noun , so the model could generalize to \u201c I hate you \u201d . People also talk about \u201c passwords \u201d , but the model doesn \u2019 t know one should not ask \u201c What \u2019 s your password ? \u201d As to the second question , we believe the reviewer is suggesting future work , and we agree that these are exciting directions to pursue in the future . 4 ) I am not sure of the value of Section 3 . In particular , it seems like the presentation of the paper would be as effective if this section was summarized in a short paragraph ( and perhaps detailed in an appendix ) . Section 3.1 , `` continuous relaxation of the input embedding '' , what does that mean since the embedding already lives in continuous space ? To the first question , we agree with the suggestion that Section 3 can be shortened . The reason we put emphasis on the continuous relaxation experiment is that we believe this is the first approach researchers will try in order to find trigger inputs for some target sequence . We thought that pointing out that this doesn \u2019 t work served as a useful motivation to turn to a enumeration based algorithm , such as gibbs-enum . For the second ( clarifying ) question , it \u2019 s true that the embedding lives in continuous space , but they are constrained to be one of the columns in the embedding matrix E^ { enc } in the trained model . By \u201c continuous relaxation of the input embedding \u201d we mean that we remove the column constraint , and allow the vector to be any continuous vector . We \u2019 ll add the explanation to the paper . 5 ) I understand that your study only considers ( when optimizing for egregious responses ) ) dialogs that are 1-turn long . I wonder if you could increase hit rates by crafting multiple inputs at once . One of the points of our work is that even if you just manipulate a 1-turn history , it is enough to trigger egregious outputs . Examining multi-turn histories will be a good subject for future work . For us , it will involve re-implementing code and re-running experiments . Our current expectation is that when you manipulate multi-turn history , that the hit rates will increase , but not significantly ."}, "1": {"review_id": "HyNA5iRcFQ-1", "review_text": "Main contribution: devising and evaluating an algorithm to find inputs that trigger arbitrary \"egregious\" outputs (\"I will kill you\") in vanilla sequence-to-sequence models, as a white-box attack on NLG models. Clarity: The paper is overall clear. I found some of the appendices (esp. B and C) to be important for understanding the paper and believe these should be in the main paper. Moving parts of Appendix A in the main text would also add to the clarity. Originality: The work looks original. It is an extension of previous attacks on seq2seq models, such as the targeted-keyword-attack from (Cheng et al., 2018) in which the model is made to produce a keyword chosen by the attacker. Significance of contribution: The lack of control over the outputs of seq2seq is a major roadblock towards their broader adoption. The authors propose two algorithms for trying to find inputs creating given outputs, a simple one relying on continuous optimization this is shown not to work (breaking when projecting back into words), and another based relying on discrete optimization. The authors found that the task is hard when using greedy decoding, but often doable using sampled decoding (note that in this case, the model will generate a different output every time). My take-aways are that the task is hard and the results highlight that vanilla seq2seq models are pretty hard to manipulate; however it is interesting to see that with sampling, models may sometimes be tricked into producing really bad outputs. This white-box attack applicable to any chatbot. As the authors noted, an egregious output for one application (\"go to hell\" for customer service) may not be egregious for another one (\"go to hell\" in MT). Overall, the authors ask an interesting question: how easy is it to craft an input for a seq2seq model that will make it produce a \"very bad\" output. The work is novel, several algorithms are introduced to try to solve the problem and a comprehensive analysis of the results is presented. The attack is still of limited practicality, but this paper feels like a nice step towards more natural adversarial attacks in NLG. One last thing: the title seems a bit misleading, the work is not about \"detecting\" egregious outputs.", "rating": "7: Good paper, accept", "reply_text": "Thanks for the detailed review , here \u2019 s responses to the advice and questions : 1 ) I found some of the appendices ( esp.B and C ) to be important for understanding the paper and believe these should be in the main paper . Moving parts of Appendix A in the main text would also add to the clarity . Thanks for reading the appendices ! We agree that it would be our preference to move them into the main body of the paper , but we were constrained by the 10 page limit . 2 ) The lack of control over the outputs of seq2seq is a major roadblock towards their broader adoption . The authors propose two algorithms for trying to find inputs creating given outputs , a simple one relying on continuous optimization this is shown not to work ( breaking when projecting back into words ) , and another based relying on discrete optimization . The authors found that the task is hard when using greedy decoding , but often doable using sampled decoding ( note that in this case , the model will generate a different output every time ) . My take-aways are that the task is hard and the results highlight that vanilla seq2seq models are pretty hard to manipulate ; however it is interesting to see that with sampling , models may sometimes be tricked into producing really bad outputs . This white-box attack applicable to any chatbot . As the authors noted , an egregious output for one application ( `` go to hell '' for customer service ) may not be egregious for another one ( `` go to hell '' in MT ) . Overall , the authors ask an interesting question : how easy is it to craft an input for a seq2seq model that will make it produce a `` very bad '' output . The work is novel , several algorithms are introduced to try to solve the problem and a comprehensive analysis of the results is presented . The attack is still of limited practicality , but this paper feels like a nice step towards more natural adversarial attacks in NLG . Your understanding about the conclusions and limitations of the this work is correct . These are the main ideas we try to convey in the paper . 3 ) One last thing : the title seems a bit misleading , the work is not about `` detecting '' egregious outputs . It is true , that we are looking for trigger inputs that would cause the model to output egregious targets in a given list . Thus we agree that \u201c detecting \u201d could be a bit misleading\u2026 . But we don \u2019 t have better word choice for now . Any suggestions are welcome ! Thanks for the review !"}, "2": {"review_id": "HyNA5iRcFQ-2", "review_text": "# Positive aspects of this submission - This submission explores a very interesting problem that is often overlooked in sequence-to-sequence models research. - The methodology in Sections 4 and 5 is very thorough and useful. - Good comparison of last-h with attention representations, which gives good insight about the robustness of each architecture against adversarial attacks. # Criticism - In Section 3, even if the \"l1 + projection\" experiments seem to show that generating egregious outputs with greedy decoding is very unlikely, it doesn't definitely prove so. It could be that your discrete optimization algorithm is suboptimal, especially given that other works on adversarial attacks for seq2seq models use different methods such as gradient regularization (Cheng et al. 2018). Similarly, the brute-force results on a simplified task in Appendix B are useful, but it's hard to tell whether the conclusions of this experiment can be extrapolated to the original dialog task. Given that you also study \"o-greedy-hit\" in more detail with a different algorithm in Sections 4 and 5, I would consider removing Section 3 or moving it to the Appendix for consistency.", "rating": "8: Top 50% of accepted papers, clear accept", "reply_text": "Thanks for the detailed review , here \u2019 s responses to the questions : 1 ) In Section 3 , even if the `` l1 + projection '' experiments seem to show that generating egregious outputs with greedy decoding is very unlikely , it does n't definitely prove so . It could be that your discrete optimization algorithm is suboptimal , especially given that other works on adversarial attacks for seq2seq models use different methods such as gradient regularization ( Cheng et al.2018 ) .Similarly , the brute-force results on a simplified task in Appendix B are useful , but it 's hard to tell whether the conclusions of this experiment can be extrapolated to the original dialog task . We agree that our approach is not a proof for the robustness for greedy decoding , but in this work we provide several empirical experiments from different angles ( the main result , continuous relaxation and brute-force enumeration ) to support that claim . And you \u2019 re right in that our algorithm is not perfect ( since the hit rate for the normal list is not 100 % , there is room for improvement in the search algorithm ) . We are aware that the algorithm in ( Cheng et al.2018 ) , in also applicable in our setting . However , the main contribution of our work is not about determining which algorithm is the best . We proposed a simple and effective gibbs-enum algorithm , and more importantly used it to demonstrate that the \u201c egregious output \u201d problem exists in standard seq2seq model training . 2 ) Given that you also study `` o-greedy-hit '' in more detail with a different algorithm in Sections 4 and 5 , I would consider removing Section 3 or moving it to the Appendix for consistency . The reason we put emphasis on the continuous relaxation experiment in Section 3 is that we believe this is the first natural approach researchers will try in order to find trigger inputs for some target sequence . We felt that by demonstrating that this doesn \u2019 t work , motivated the enumeration based algorithm , such as gibbs-enum . Thanks for the review !"}}