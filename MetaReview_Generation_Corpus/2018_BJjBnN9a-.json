{"year": "2018", "forum": "BJjBnN9a-", "title": "Continuous Convolutional Neural Networks for Image Classification", "decision": "Reject", "meta_review": "The paper received borderline negative scores: 5,6,4.\n\nThe authors response to R1 question about the motivations was \"...thus can achieve similar classification results with much smaller network sizes. This translates into smaller memory requirements, faster computational speeds and higher expressivity.\" If this is really the case, then some experimental comparison to compression methods (e.g. Song Han's PhD work at Stanford) is needed to back up this.\n\nR4 raises issues with the experimental evaluation and the AC agrees with them that they are disappointing. In general R4 makes some good suggestions for improving the paper.\n\nThe author's rebuttal also makes the general point that the paper should be accepted as it contains ideas, that these are sufficient alone: \"We strongly believe that with some fine-tuning it could achieve considerably better results, however we also believe that this is not the point in a first submission...\". The AC disagrees with this. Ideas are cheap. *Good ideas*, i.e. those that work, as in get good performance on standard benchmarks are valuable however. The reason for having benchmarks is to give some of objective way of seeing if an idea has any merit to it. So while the reviewers and the AC accept that the paper has some interesting ideas, this is not enough for warrant acceptance. ", "reviews": [{"review_id": "BJjBnN9a--0", "review_text": "The paper introduces the notion of continuous convolutional neural networks. The main idea of the paper is to project examples into an RK Hilbert space and performs convolution and filtering into that space. Interestingly, the filters defined in the Hilbert space have parameters that are learnable. While the idea may be novel and interesting, its motivation is not clear for me. Is it for space? for speed? for expressivity of hypothesis spaces? Most data that are available for learning are in discrete forms and hopefully, they have been digitalized according to Shannon theory. This means that they bring all necessary information for rebuilding their continuous counterpart. Hence, it is not clear why projecting them back into continuous functions is of interest. Another point that is not clear or at least misleading is the so-called Hilbert Maps. As far as I understand, Equation (4) is not an embedding into an Hilbert space but is more a proximity space representation [1]. Hence, the learning framework of the authors can be casted more as a learning with similarity function than learning into a RKHS [2]. A proper embedding would have mapped $x$ into a function belonging to $\\mH$. In addition, it seems that all computations are done into a \\ell^2 space instead of in the RKHS (equations 5 and 11). Learning good similarity functions is also not novel [3] and Equations (6) and (7) corresponds to learning these similarity functions. As far as I remember, there exists also some paper from the nineties that learn the parameters of RBF networks but unfortunately I have not been able to google some of them. Part 3 is the most interesting part of the paper, however it would have been great if the authors provide other kernel functions with closed-form convolution formula that may be relevant for learning. The proposed methodology is evaluated on some standard benchmarks in vision. While results are pretty good, it is not clear how the various cluster sets have been obtained and what are their influence on the performances (if they are randomly initialized, it would be great to see standard deviation of performances with respect to initializations). I would also be great to have intuitions on why a single continuous filter works betters than 20 discrete ones (if this behaviour is consistent accross initialization). On the overall, while the idea may be of interested, the paper lacks in motivations in connecting to relevant previous works and in providing insights on why it works. However, performance results seem to be competitive and that's the reader may be eager for insights. minor comments --------------- * the paper employs vocabulary that is not common in ML. eg. I am not sure what occupancy values, or inducing points are. * Supposingly that the authors properly consider computation in RKHS, then \\Sigma_i should be definite positive right? how update in (7) is guaranteed to be DP? This constraints may not be necessary if instead they used proximity space representation. [1] https://alex.smola.org/papers/1999/GraHerSchSmo99.pdf [2] https://www.cs.cmu.edu/~avrim/Papers/similarity-bbs.pdf [3] A. Bellet, A. Habrard and M. Sebban. Similarity Learning for Provably Accurate Sparse Linear Classification. ", "rating": "5: Marginally below acceptance threshold", "reply_text": "-- -- -- -- -- \u2013 Q : The proposed methodology is evaluated on some standard benchmarks in vision . While results are pretty good , it is not clear how the various cluster sets have been obtained and what are their influence on the performances ( if they are randomly initialized , it would be great to see standard deviation of performances with respect to initializations ) . \u2013 A : Although not required , in all experiments the cluster set was initialized as a grid , with mean values equally spaced and the same variance value , so that the distance between mean values is equal to two standard deviations ( weight values are initialized randomly , using a Gaussian distribution with mean 0 and variance 0.1 ) . This was done to guarantee a good coverage of the entire input space even with a small number of clusters . These values were then optimized accordingly ( input data using the joint kernel learning methodology from Section 2.3 and feature maps using the classification methodology from Section 3 ) . This was clarified on the paper , to facilitate the reader \u2019 s understanding . -- -- -- -- -- \u2013 Q : I would also be great to have intuitions on why a single continuous filter works betters than 20 discrete ones ( if this behaviour is consistent accross initialization ) . On the overall , while the idea may be of interested , the paper lacks in motivations in connecting to relevant previous works and in providing insights on why it works . However , performance results seem to be competitive and that 's the reader may be eager for insights . \u2013 A : Projecting discrete data into a continuous function in a RKHS provides an alternative method of data representation , which we can exploit to produce more descriptive feature maps . For example , we are not constrained to a fixed-size grid map , but rather have inducing points that are free to move around the input space , and these positions , alongside other kernel parameters ( i.e.variance values ) are learned during the training process in conjunction with the more traditional weight values . This produces certain degrees of freedom in the learning process that can not be achieved with standard discrete convolutional kernels , especially when dealing with such narrow and shallow topologies . We provide connections with previous works on Hilbert Maps , and with tangentially similar works on RKHS projection for convolution , however the proposed methodology is novel and still has not been explored in a neural network context , for deep learning purposes . -- -- -- -- -- \u2013 Q : The paper employs vocabulary that is not common in ML . eg.I am not sure what occupancy values , or inducing points are . \u2013 A : Occupancy values are simply the probability of a given input point to be occupied or not , varying from 0.0 ( not occupied ) to 0.5 ( unknown ) and 1.0 ( occupied ) . They are given by the classifier used as the occupancy model , based on input points projected into the RKHS . The inducing set is used to approximate training data using a smaller subset of points , for computational purposes ( the number M of inducing points is much smaller than the number N of training points , M < < N ) . Once optimization is complete , the training data can be discarded and only the inducing set is maintained , which greatly decreases memory requirements . These terms were clarified in the paper , to facilitate the reader \u2019 s understanding . -- -- -- -- -- \u2013 Q : Supposing that the authors properly consider computation in RKHS , then \\Sigma_i should be definite positive right ? how update in ( 7 ) is guaranteed to be DP ? This constraints may not be necessary if instead they used proximity space representation . \u2013 A : To guarantee positive-definiteness , we are in fact learning a lower triangular matrix V , which is then used to produce \\Sigma_i = U^T . U , a positive-definite matrix . U is assumed to be invertible ( i.e.it has no zeros on the main diagonal ) , which indeed can not be guaranteed during the optimization process , however that was never the case in any of the experiments . We attribute this behavior to the initialization procedure , which places a large variance value for each kernel , so it stabilizes before reaching values close to zero ( the noisy nature of stochastic gradient descent also naturally avoids exact values of zero for trainable parameters ) . This has been clarified on the paper , to facilitate the reader \u2019 s understanding ."}, {"review_id": "BJjBnN9a--1", "review_text": "This paper aims to provide a continuous variant of CNN. The main idea is to apply CNN on Hilbert maps of the data. The data is mapped to a continuous Hilbert space via a reproducing kernel and a convolution layer is defined using the kernel matrix. A convolutional Hilbert layer algorithm is introduced and evaluated on image classification data sets. The paper is well written and provides some new insights on incorporating kernels in CNN. The kernel matrix in Eq. 5 is not symmetric and the kernel function in Eq. 3 is not defined over a pair of inputs. In this case, the projections of the data via the kernel are not necessarily in a RKHS. The connection between Hilbert maps and RKHS in that sense is not clear in the paper. The size of a kernel matrix depends on the sample size. In large scale situations, working with the kernel matrix can be computational expensive. It is not clear how this issue is addressed in this paper. In section 2.2, how \\mu_i and \\sigma_i are computed? How the proposed approach can be compared to convolutional kernel networks (NIPS paper) of Mairal et al. (2014)?", "rating": "6: Marginally above acceptance threshold", "reply_text": "-- -- -- -- -- \u2013 Q : The kernel matrix in Eq.5 is not symmetric and the kernel function in Eq.3 is not defined over a pair of inputs . In this case , the projections of the data via the kernel are not necessarily in a RKHS . The connection between Hilbert maps and RKHS in that sense is not clear in the paper . \u2013 A : Equation ( 3 ) is defined over pairs of inputs in the sense that they correlate input points with inducing points , according to a covariance matrix that acts as length-scale . The equation was rewritten for clarity , and a better explanation on this behavior was provided to facilitate the reader \u2019 s understanding . The kernel matrix in Equation ( 5 ) is not square , so it can not be symmetrical ( i.e.it is not a covariance matrix ) . It is a N x M matrix containing , in each row , the feature vector corresponding to each input point , which is then multiplied by the weights to produce a single scalar for each row , which is then added to the bias . This is standard procedure for the Hilbert Maps training and inference process , but rewritten as a neural network layer to allow back-propagation and joint kernel parameter learning during the training process . -- -- -- -- -- \u2013 Q : The size of a kernel matrix depends on the sample size . In large scale situations , working with the kernel matrix can be computational expensive . It is not clear how this issue is addressed in this paper . \u2013 A : The number of inducing points used for RKHS projection is typically much smaller than the number of training points ( especially at higher dimensions ) , which alleviates large-scale issues . Additionally , the proposed framework can be sparsified , by considering only a subset of inducing points when calculating the feature vector for each input point . This strategy has been successfully applied in a Gaussian process context [ 4 ] , and can be easily extended to the proposed framework without minimal modifications . This was not addressed in this paper due to software limitations when dealing with back-propagation through sparse matrices , however as mentioned it is planned for future work and stable code release . -- -- -- -- -- \u2013 Q : In section 2.2 , how \\mu_i and \\sigma_i are computed ? \u2013 A : In the original Hilbert Maps paper , the authors cluster input data and use each subset of points to calculate statistical mean and variance values . In this paper , these values are obtained using the joint kernel learning methodology proposed in Section 2.3 to produce optimal weight , mean and variance values from initial guesses . In all experiments , the clusters were initialized as a grid , with mean values equally spaced and the same variance value , so that the distance between mean values is equal to two standard deviations ( weight values are initialized randomly , using a Gaussian distribution with mean 0 and variance 0.1 ) . This has been clarified on the paper , to facilitate the reader \u2019 s understanding . -- -- -- -- -- \u2013 Q : How the proposed approach can be compared to convolutional kernel networks ( NIPS paper ) of Mairal et al . ( 2014 ) ? \u2013 A : To the best of our knowledge , the works of [ 5,6 ] are the most similar to the proposed methodology , in the sense that both apply RKHS projections using kernels to produce convolutional results in a a multi-layer neural network . However , there are key differences in how this is achieved , most notably because Convolutional Kernel Networks ( CKN ) still rely on discrete image patches , that are projected individually into the RKHS via the kernel function , and its parameters are the same as in standard discrete convolution ( number of layers , number of filters , shape of filters and size of feature maps ) , while the others ( \\beta_k and \\sigma_k ) are automatically chosen . On the other hand , the proposed methodology first projects the entire input data into the RKHS via the kernel functions , and then performs convolution directly in this projected continuous function , without ever touching the original dataset again . Additionally , the proposed methodology also learns extra kernel parameters ( i.e.mean and variance ) on top of the standard discrete convolution parameters . This analysis has been added to the paper , for a better understanding of the differences between these two techniques ."}, {"review_id": "BJjBnN9a--2", "review_text": "This paper formulates a variant of convolutional neural networks which models both activations and filters as continuous functions composed from kernel bases. A closed-form representation for convolution of such functions is used to compute in a manner than maintains continuous representations, without making discrete approximations as in standard CNNs. The proposed continuous convolutional neural networks (CCNNs) project input data into a RKHS with a Gaussian kernel function evaluated at a set of inducing points; the parameters defining the inducing points are optimized via backprop. Filters in convolutional layers are represented in a similar manner, yielding a closed-form expression for convolution between input and filters. Experiments train CCNNs on several standard small-scale image classification datasets: MNIST, CIFAR-10, STL-10, and SVHN. While the idea is interesting and might be a good alternative to standard CNNs, the paper falls short in terms of providing experimental validation that would demonstrate the latter point. It unfortunately only experiments with CCNN architectures with a small number (eg 3) layers. They do well on MNIST, but MNIST performance is hardly informative as many supervised techniques achieve near perfect results. The CIFAR-10, STL-10, and SVHN results are disappointing. CCNNs do not outperform the prior CNN results listed in Table 2,3,4. Moreover, these tables do not even cite more recent higher-performing CNNs. See results table in (*) for CIFAR-10 and SVHN results on recent ResNet and DenseNet CNN designs which far outperform the methods listed in this paper. The problem appears to be that CCNNs are not tested in a regime competitive with the state-of-the-art CNNs on the datasets used. Why not? To be competitive, deeper CCNNs would likely need to be trained. I would like to see results for CCNNs with many layers (eg 16+ layers) rather than just 3 layers. Do such CCNNs achieve performance compatible with ResNet/DenseNet on CIFAR or SVHN? Given that CIFAR and SVHN are relatively small datasets, training and testing larger networks on them should not be computationally prohibitive. In addition, for such experiments, a clear report of parameters and FLOPs for each network should be included in the results table. This would assist in understanding tradeoffs in the design space. Additional questions: What is the receptive field of the CCNNs vs those of the standard CNNs to which they are compared? If the CCNNs have effectively larger receptive field, does this create a cost in FLOPs compared to standard CNNs? For CCNNs, why does the CCAE initialization appear to be essential to achieving high performance on CIFAR-10 and SVHN? Standard CNNs, trained on supervised image classification tasks do not appear to be dependent on initialization schemes that do unsupervised pre-training. Such dependence for CCNNs appears to be a weakness in comparison.", "rating": "4: Ok but not good enough - rejection", "reply_text": "-- -- -- -- -- \u2013 Q : Experiments train CCNNs on several standard small-scale image classification datasets : MNIST , CIFAR-10 , STL-10 , and SVHN . While the idea is interesting and might be a good alternative to standard CNNs , the paper falls short in terms of providing experimental validation that would demonstrate the latter point . It unfortunately only experiments with CCNN architectures with a small number ( eg 3 ) layers . CCNNs do not outperform the prior CNN results listed in Table 2,3,4 . Moreover , these tables do not even cite more recent higher-performing CNNs . The problem appears to be that CCNNs are not tested in a regime competitive with the state-of-the-art CNNs on the datasets used . Why not ? \u2013 A : We agree that experimental results are not on par with the latest achievements in these datasets , however we would like to point out that the CCNN topologies used in this paper are much simpler than standard CNN state-of-the-art counterparts , containing only a fraction of the number of trainable parameters , and do not include many of the regularization techniques and optimization tricks commonly used to avoid these shortcomings . This was a choice , so we can analyze this novel technique by itself in a more pure state , without relying on quick fixes that are already available in the literature and can be easily incorporated regardless of which convolutional layer ( continuous or discrete ) is utilized . Additionally , the proposed framework consistently outperforms Convolutional Kernel Networks [ 6 ] , which is currently the most well-known deep learning approach that relies on kernel functions and RKHS projections . Stable code will be released with the paper , and we will encourage and work alongside interested parties in order to test the proposed framework under different conditions , but we believe a first submission should focus more on the theoretical aspects and less on fine-tuning for optimal performance . And , as a conference on learning representations , ICLR would be the perfect vehicle to introduce a novel methodology for data modeling in deep learning tasks . -- -- -- -- -- \u2013 Q : What is the receptive field of the CCNNs vs those of the standard CNNs to which they are compared ? If the CCNNs have effectively larger receptive field , does this create a cost in FLOPs compared to standard CNNs ? \u2013 A : The proposed framework does not have a fixed receptive field , but rather a fixed number of inducing points that compose each feature map . The location ( and variance ) of these inducing points is optimized during training , so they can be further or nearer the center of the feature map as needed , in order to minimize the cost function . Therefore , a CCNN can have a larger receptive field in comparison to a CNN without necessarily increasing FLOPs . The number of inducing points for the proposed classification topology is described in the experiments section , and vary for each layer of the neural network ( 25-16-9 ) . If converted to receptive field sizes , these are within the standard sizes for CNNs ( 5x5 , 4x4 and 3x3 ) . -- -- -- -- -- \u2013 Q : For CCNNs , why does the CCAE initialization appear to be essential to achieving high performance on CIFAR-10 and SVHN ? Standard CNNs , trained on supervised image classification tasks do not appear to be dependent on initialization schemes that do unsupervised pre-training . Such dependence for CCNNs appears to be a weakness in comparison . \u2013 A : The convolutional filters in a CCNN are more expressive than in a standard CNN , and therefore have more degrees of freedom , which creates more stable suboptimal solutions during the optimization process . The CCAE initialization provides better starting points for these convolutional filters , so they can converge to more optimal solutions . We agree that this is a weakness , however it is worth mentioning that the CCNN topologies used in experiments are much simpler than standard CNN state-of-the-art counterparts , and do not include many of the regularization techniques and optimization tricks commonly used to avoid these shortcomings . This was a choice , so we can analyze this novel technique by itself in a more pure state , without relying on quick fixes that are already available in the literature and can be easily incorporated to mask otherwise interesting behaviors ( such as this one ) ."}], "0": {"review_id": "BJjBnN9a--0", "review_text": "The paper introduces the notion of continuous convolutional neural networks. The main idea of the paper is to project examples into an RK Hilbert space and performs convolution and filtering into that space. Interestingly, the filters defined in the Hilbert space have parameters that are learnable. While the idea may be novel and interesting, its motivation is not clear for me. Is it for space? for speed? for expressivity of hypothesis spaces? Most data that are available for learning are in discrete forms and hopefully, they have been digitalized according to Shannon theory. This means that they bring all necessary information for rebuilding their continuous counterpart. Hence, it is not clear why projecting them back into continuous functions is of interest. Another point that is not clear or at least misleading is the so-called Hilbert Maps. As far as I understand, Equation (4) is not an embedding into an Hilbert space but is more a proximity space representation [1]. Hence, the learning framework of the authors can be casted more as a learning with similarity function than learning into a RKHS [2]. A proper embedding would have mapped $x$ into a function belonging to $\\mH$. In addition, it seems that all computations are done into a \\ell^2 space instead of in the RKHS (equations 5 and 11). Learning good similarity functions is also not novel [3] and Equations (6) and (7) corresponds to learning these similarity functions. As far as I remember, there exists also some paper from the nineties that learn the parameters of RBF networks but unfortunately I have not been able to google some of them. Part 3 is the most interesting part of the paper, however it would have been great if the authors provide other kernel functions with closed-form convolution formula that may be relevant for learning. The proposed methodology is evaluated on some standard benchmarks in vision. While results are pretty good, it is not clear how the various cluster sets have been obtained and what are their influence on the performances (if they are randomly initialized, it would be great to see standard deviation of performances with respect to initializations). I would also be great to have intuitions on why a single continuous filter works betters than 20 discrete ones (if this behaviour is consistent accross initialization). On the overall, while the idea may be of interested, the paper lacks in motivations in connecting to relevant previous works and in providing insights on why it works. However, performance results seem to be competitive and that's the reader may be eager for insights. minor comments --------------- * the paper employs vocabulary that is not common in ML. eg. I am not sure what occupancy values, or inducing points are. * Supposingly that the authors properly consider computation in RKHS, then \\Sigma_i should be definite positive right? how update in (7) is guaranteed to be DP? This constraints may not be necessary if instead they used proximity space representation. [1] https://alex.smola.org/papers/1999/GraHerSchSmo99.pdf [2] https://www.cs.cmu.edu/~avrim/Papers/similarity-bbs.pdf [3] A. Bellet, A. Habrard and M. Sebban. Similarity Learning for Provably Accurate Sparse Linear Classification. ", "rating": "5: Marginally below acceptance threshold", "reply_text": "-- -- -- -- -- \u2013 Q : The proposed methodology is evaluated on some standard benchmarks in vision . While results are pretty good , it is not clear how the various cluster sets have been obtained and what are their influence on the performances ( if they are randomly initialized , it would be great to see standard deviation of performances with respect to initializations ) . \u2013 A : Although not required , in all experiments the cluster set was initialized as a grid , with mean values equally spaced and the same variance value , so that the distance between mean values is equal to two standard deviations ( weight values are initialized randomly , using a Gaussian distribution with mean 0 and variance 0.1 ) . This was done to guarantee a good coverage of the entire input space even with a small number of clusters . These values were then optimized accordingly ( input data using the joint kernel learning methodology from Section 2.3 and feature maps using the classification methodology from Section 3 ) . This was clarified on the paper , to facilitate the reader \u2019 s understanding . -- -- -- -- -- \u2013 Q : I would also be great to have intuitions on why a single continuous filter works betters than 20 discrete ones ( if this behaviour is consistent accross initialization ) . On the overall , while the idea may be of interested , the paper lacks in motivations in connecting to relevant previous works and in providing insights on why it works . However , performance results seem to be competitive and that 's the reader may be eager for insights . \u2013 A : Projecting discrete data into a continuous function in a RKHS provides an alternative method of data representation , which we can exploit to produce more descriptive feature maps . For example , we are not constrained to a fixed-size grid map , but rather have inducing points that are free to move around the input space , and these positions , alongside other kernel parameters ( i.e.variance values ) are learned during the training process in conjunction with the more traditional weight values . This produces certain degrees of freedom in the learning process that can not be achieved with standard discrete convolutional kernels , especially when dealing with such narrow and shallow topologies . We provide connections with previous works on Hilbert Maps , and with tangentially similar works on RKHS projection for convolution , however the proposed methodology is novel and still has not been explored in a neural network context , for deep learning purposes . -- -- -- -- -- \u2013 Q : The paper employs vocabulary that is not common in ML . eg.I am not sure what occupancy values , or inducing points are . \u2013 A : Occupancy values are simply the probability of a given input point to be occupied or not , varying from 0.0 ( not occupied ) to 0.5 ( unknown ) and 1.0 ( occupied ) . They are given by the classifier used as the occupancy model , based on input points projected into the RKHS . The inducing set is used to approximate training data using a smaller subset of points , for computational purposes ( the number M of inducing points is much smaller than the number N of training points , M < < N ) . Once optimization is complete , the training data can be discarded and only the inducing set is maintained , which greatly decreases memory requirements . These terms were clarified in the paper , to facilitate the reader \u2019 s understanding . -- -- -- -- -- \u2013 Q : Supposing that the authors properly consider computation in RKHS , then \\Sigma_i should be definite positive right ? how update in ( 7 ) is guaranteed to be DP ? This constraints may not be necessary if instead they used proximity space representation . \u2013 A : To guarantee positive-definiteness , we are in fact learning a lower triangular matrix V , which is then used to produce \\Sigma_i = U^T . U , a positive-definite matrix . U is assumed to be invertible ( i.e.it has no zeros on the main diagonal ) , which indeed can not be guaranteed during the optimization process , however that was never the case in any of the experiments . We attribute this behavior to the initialization procedure , which places a large variance value for each kernel , so it stabilizes before reaching values close to zero ( the noisy nature of stochastic gradient descent also naturally avoids exact values of zero for trainable parameters ) . This has been clarified on the paper , to facilitate the reader \u2019 s understanding ."}, "1": {"review_id": "BJjBnN9a--1", "review_text": "This paper aims to provide a continuous variant of CNN. The main idea is to apply CNN on Hilbert maps of the data. The data is mapped to a continuous Hilbert space via a reproducing kernel and a convolution layer is defined using the kernel matrix. A convolutional Hilbert layer algorithm is introduced and evaluated on image classification data sets. The paper is well written and provides some new insights on incorporating kernels in CNN. The kernel matrix in Eq. 5 is not symmetric and the kernel function in Eq. 3 is not defined over a pair of inputs. In this case, the projections of the data via the kernel are not necessarily in a RKHS. The connection between Hilbert maps and RKHS in that sense is not clear in the paper. The size of a kernel matrix depends on the sample size. In large scale situations, working with the kernel matrix can be computational expensive. It is not clear how this issue is addressed in this paper. In section 2.2, how \\mu_i and \\sigma_i are computed? How the proposed approach can be compared to convolutional kernel networks (NIPS paper) of Mairal et al. (2014)?", "rating": "6: Marginally above acceptance threshold", "reply_text": "-- -- -- -- -- \u2013 Q : The kernel matrix in Eq.5 is not symmetric and the kernel function in Eq.3 is not defined over a pair of inputs . In this case , the projections of the data via the kernel are not necessarily in a RKHS . The connection between Hilbert maps and RKHS in that sense is not clear in the paper . \u2013 A : Equation ( 3 ) is defined over pairs of inputs in the sense that they correlate input points with inducing points , according to a covariance matrix that acts as length-scale . The equation was rewritten for clarity , and a better explanation on this behavior was provided to facilitate the reader \u2019 s understanding . The kernel matrix in Equation ( 5 ) is not square , so it can not be symmetrical ( i.e.it is not a covariance matrix ) . It is a N x M matrix containing , in each row , the feature vector corresponding to each input point , which is then multiplied by the weights to produce a single scalar for each row , which is then added to the bias . This is standard procedure for the Hilbert Maps training and inference process , but rewritten as a neural network layer to allow back-propagation and joint kernel parameter learning during the training process . -- -- -- -- -- \u2013 Q : The size of a kernel matrix depends on the sample size . In large scale situations , working with the kernel matrix can be computational expensive . It is not clear how this issue is addressed in this paper . \u2013 A : The number of inducing points used for RKHS projection is typically much smaller than the number of training points ( especially at higher dimensions ) , which alleviates large-scale issues . Additionally , the proposed framework can be sparsified , by considering only a subset of inducing points when calculating the feature vector for each input point . This strategy has been successfully applied in a Gaussian process context [ 4 ] , and can be easily extended to the proposed framework without minimal modifications . This was not addressed in this paper due to software limitations when dealing with back-propagation through sparse matrices , however as mentioned it is planned for future work and stable code release . -- -- -- -- -- \u2013 Q : In section 2.2 , how \\mu_i and \\sigma_i are computed ? \u2013 A : In the original Hilbert Maps paper , the authors cluster input data and use each subset of points to calculate statistical mean and variance values . In this paper , these values are obtained using the joint kernel learning methodology proposed in Section 2.3 to produce optimal weight , mean and variance values from initial guesses . In all experiments , the clusters were initialized as a grid , with mean values equally spaced and the same variance value , so that the distance between mean values is equal to two standard deviations ( weight values are initialized randomly , using a Gaussian distribution with mean 0 and variance 0.1 ) . This has been clarified on the paper , to facilitate the reader \u2019 s understanding . -- -- -- -- -- \u2013 Q : How the proposed approach can be compared to convolutional kernel networks ( NIPS paper ) of Mairal et al . ( 2014 ) ? \u2013 A : To the best of our knowledge , the works of [ 5,6 ] are the most similar to the proposed methodology , in the sense that both apply RKHS projections using kernels to produce convolutional results in a a multi-layer neural network . However , there are key differences in how this is achieved , most notably because Convolutional Kernel Networks ( CKN ) still rely on discrete image patches , that are projected individually into the RKHS via the kernel function , and its parameters are the same as in standard discrete convolution ( number of layers , number of filters , shape of filters and size of feature maps ) , while the others ( \\beta_k and \\sigma_k ) are automatically chosen . On the other hand , the proposed methodology first projects the entire input data into the RKHS via the kernel functions , and then performs convolution directly in this projected continuous function , without ever touching the original dataset again . Additionally , the proposed methodology also learns extra kernel parameters ( i.e.mean and variance ) on top of the standard discrete convolution parameters . This analysis has been added to the paper , for a better understanding of the differences between these two techniques ."}, "2": {"review_id": "BJjBnN9a--2", "review_text": "This paper formulates a variant of convolutional neural networks which models both activations and filters as continuous functions composed from kernel bases. A closed-form representation for convolution of such functions is used to compute in a manner than maintains continuous representations, without making discrete approximations as in standard CNNs. The proposed continuous convolutional neural networks (CCNNs) project input data into a RKHS with a Gaussian kernel function evaluated at a set of inducing points; the parameters defining the inducing points are optimized via backprop. Filters in convolutional layers are represented in a similar manner, yielding a closed-form expression for convolution between input and filters. Experiments train CCNNs on several standard small-scale image classification datasets: MNIST, CIFAR-10, STL-10, and SVHN. While the idea is interesting and might be a good alternative to standard CNNs, the paper falls short in terms of providing experimental validation that would demonstrate the latter point. It unfortunately only experiments with CCNN architectures with a small number (eg 3) layers. They do well on MNIST, but MNIST performance is hardly informative as many supervised techniques achieve near perfect results. The CIFAR-10, STL-10, and SVHN results are disappointing. CCNNs do not outperform the prior CNN results listed in Table 2,3,4. Moreover, these tables do not even cite more recent higher-performing CNNs. See results table in (*) for CIFAR-10 and SVHN results on recent ResNet and DenseNet CNN designs which far outperform the methods listed in this paper. The problem appears to be that CCNNs are not tested in a regime competitive with the state-of-the-art CNNs on the datasets used. Why not? To be competitive, deeper CCNNs would likely need to be trained. I would like to see results for CCNNs with many layers (eg 16+ layers) rather than just 3 layers. Do such CCNNs achieve performance compatible with ResNet/DenseNet on CIFAR or SVHN? Given that CIFAR and SVHN are relatively small datasets, training and testing larger networks on them should not be computationally prohibitive. In addition, for such experiments, a clear report of parameters and FLOPs for each network should be included in the results table. This would assist in understanding tradeoffs in the design space. Additional questions: What is the receptive field of the CCNNs vs those of the standard CNNs to which they are compared? If the CCNNs have effectively larger receptive field, does this create a cost in FLOPs compared to standard CNNs? For CCNNs, why does the CCAE initialization appear to be essential to achieving high performance on CIFAR-10 and SVHN? Standard CNNs, trained on supervised image classification tasks do not appear to be dependent on initialization schemes that do unsupervised pre-training. Such dependence for CCNNs appears to be a weakness in comparison.", "rating": "4: Ok but not good enough - rejection", "reply_text": "-- -- -- -- -- \u2013 Q : Experiments train CCNNs on several standard small-scale image classification datasets : MNIST , CIFAR-10 , STL-10 , and SVHN . While the idea is interesting and might be a good alternative to standard CNNs , the paper falls short in terms of providing experimental validation that would demonstrate the latter point . It unfortunately only experiments with CCNN architectures with a small number ( eg 3 ) layers . CCNNs do not outperform the prior CNN results listed in Table 2,3,4 . Moreover , these tables do not even cite more recent higher-performing CNNs . The problem appears to be that CCNNs are not tested in a regime competitive with the state-of-the-art CNNs on the datasets used . Why not ? \u2013 A : We agree that experimental results are not on par with the latest achievements in these datasets , however we would like to point out that the CCNN topologies used in this paper are much simpler than standard CNN state-of-the-art counterparts , containing only a fraction of the number of trainable parameters , and do not include many of the regularization techniques and optimization tricks commonly used to avoid these shortcomings . This was a choice , so we can analyze this novel technique by itself in a more pure state , without relying on quick fixes that are already available in the literature and can be easily incorporated regardless of which convolutional layer ( continuous or discrete ) is utilized . Additionally , the proposed framework consistently outperforms Convolutional Kernel Networks [ 6 ] , which is currently the most well-known deep learning approach that relies on kernel functions and RKHS projections . Stable code will be released with the paper , and we will encourage and work alongside interested parties in order to test the proposed framework under different conditions , but we believe a first submission should focus more on the theoretical aspects and less on fine-tuning for optimal performance . And , as a conference on learning representations , ICLR would be the perfect vehicle to introduce a novel methodology for data modeling in deep learning tasks . -- -- -- -- -- \u2013 Q : What is the receptive field of the CCNNs vs those of the standard CNNs to which they are compared ? If the CCNNs have effectively larger receptive field , does this create a cost in FLOPs compared to standard CNNs ? \u2013 A : The proposed framework does not have a fixed receptive field , but rather a fixed number of inducing points that compose each feature map . The location ( and variance ) of these inducing points is optimized during training , so they can be further or nearer the center of the feature map as needed , in order to minimize the cost function . Therefore , a CCNN can have a larger receptive field in comparison to a CNN without necessarily increasing FLOPs . The number of inducing points for the proposed classification topology is described in the experiments section , and vary for each layer of the neural network ( 25-16-9 ) . If converted to receptive field sizes , these are within the standard sizes for CNNs ( 5x5 , 4x4 and 3x3 ) . -- -- -- -- -- \u2013 Q : For CCNNs , why does the CCAE initialization appear to be essential to achieving high performance on CIFAR-10 and SVHN ? Standard CNNs , trained on supervised image classification tasks do not appear to be dependent on initialization schemes that do unsupervised pre-training . Such dependence for CCNNs appears to be a weakness in comparison . \u2013 A : The convolutional filters in a CCNN are more expressive than in a standard CNN , and therefore have more degrees of freedom , which creates more stable suboptimal solutions during the optimization process . The CCAE initialization provides better starting points for these convolutional filters , so they can converge to more optimal solutions . We agree that this is a weakness , however it is worth mentioning that the CCNN topologies used in experiments are much simpler than standard CNN state-of-the-art counterparts , and do not include many of the regularization techniques and optimization tricks commonly used to avoid these shortcomings . This was a choice , so we can analyze this novel technique by itself in a more pure state , without relying on quick fixes that are already available in the literature and can be easily incorporated to mask otherwise interesting behaviors ( such as this one ) ."}}